/* automatically generated by rust-bindgen */

pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self)
     -> *mut [::std::os::raw::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed2 { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type idtype_t = Enum_Unnamed2;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type size_t = __darwin_size_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1:
                                                      ::std::os::raw::c_int)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             ::std::os::raw::c_int,
                                                         arg2:
                                                             *mut Struct___siginfo,
                                                         arg3:
                                                             *mut ::std::os::raw::c_void)> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg2:
                                                                 ::std::os::raw::c_int,
                                                             arg3:
                                                                 ::std::os::raw::c_int,
                                                             arg4:
                                                                 *mut siginfo_t,
                                                             arg5:
                                                                 *mut ::std::os::raw::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1:
                                                            ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = ::std::os::raw::c_char;
pub type int16_t = ::std::os::raw::c_short;
pub type int32_t = ::std::os::raw::c_int;
pub type int64_t = ::std::os::raw::c_longlong;
pub type uint8_t = ::std::os::raw::c_uchar;
pub type uint16_t = ::std::os::raw::c_ushort;
pub type uint32_t = ::std::os::raw::c_uint;
pub type uint64_t = ::std::os::raw::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type HPDF_INT = ::std::os::raw::c_int;
pub type HPDF_UINT = ::std::os::raw::c_uint;
pub type HPDF_INT32 = ::std::os::raw::c_int;
pub type HPDF_UINT32 = ::std::os::raw::c_uint;
pub type HPDF_INT16 = ::std::os::raw::c_short;
pub type HPDF_UINT16 = ::std::os::raw::c_ushort;
pub type HPDF_INT8 = ::std::os::raw::c_char;
pub type HPDF_UINT8 = ::std::os::raw::c_uchar;
pub type HPDF_BYTE = ::std::os::raw::c_uchar;
pub type HPDF_REAL = ::std::os::raw::c_float;
pub type HPDF_DOUBLE = ::std::os::raw::c_double;
pub type HPDF_BOOL = ::std::os::raw::c_int;
pub type HPDF_STATUS = ::std::os::raw::c_ulong;
pub type HPDF_CID = HPDF_UINT16;
pub type HPDF_UNICODE = HPDF_UINT16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Point {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Point {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Point {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Point = Struct__HPDF_Point;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Rect {
    pub left: HPDF_REAL,
    pub bottom: HPDF_REAL,
    pub right: HPDF_REAL,
    pub top: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Rect {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Rect = Struct__HPDF_Rect;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Point3D {
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
    pub z: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Point3D {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Point3D {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Point3D = Struct__HPDF_Point3D;
pub type HPDF_Box = Struct__HPDF_Rect;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Date {
    pub year: HPDF_INT,
    pub month: HPDF_INT,
    pub day: HPDF_INT,
    pub hour: HPDF_INT,
    pub minutes: HPDF_INT,
    pub seconds: HPDF_INT,
    pub ind: ::std::os::raw::c_char,
    pub off_hour: HPDF_INT,
    pub off_minutes: HPDF_INT,
}
impl ::std::clone::Clone for Struct__HPDF_Date {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Date {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Date = Struct__HPDF_Date;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_InfoType {
    HPDF_INFO_CREATION_DATE = 0,
    HPDF_INFO_MOD_DATE = 1,
    HPDF_INFO_AUTHOR = 2,
    HPDF_INFO_CREATOR = 3,
    HPDF_INFO_PRODUCER = 4,
    HPDF_INFO_TITLE = 5,
    HPDF_INFO_SUBJECT = 6,
    HPDF_INFO_KEYWORDS = 7,
    HPDF_INFO_TRAPPED = 8,
    HPDF_INFO_GTS_PDFX = 9,
    HPDF_INFO_EOF = 10,
}
pub type HPDF_InfoType = Enum__HPDF_InfoType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PDFA_TYPE { HPDF_PDFA_1A = 0, HPDF_PDFA_1B = 1, }
pub type HPDF_PDFAType = Enum__HPDF_PDFA_TYPE;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PdfVer {
    HPDF_VER_12 = 0,
    HPDF_VER_13 = 1,
    HPDF_VER_14 = 2,
    HPDF_VER_15 = 3,
    HPDF_VER_16 = 4,
    HPDF_VER_17 = 5,
    HPDF_VER_EOF = 6,
}
pub type HPDF_PDFVer = Enum__HPDF_PdfVer;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_EncryptMode { HPDF_ENCRYPT_R2 = 2, HPDF_ENCRYPT_R3 = 3, }
pub type HPDF_EncryptMode = Enum__HPDF_EncryptMode;
pub type HPDF_Error_Handler =
    ::std::option::Option<unsafe extern "C" fn(error_no: HPDF_STATUS,
                                               detail_no: HPDF_STATUS,
                                               user_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type HPDF_Alloc_Func =
    ::std::option::Option<extern "C" fn(size: HPDF_UINT)
                              -> *mut ::std::os::raw::c_void>;
pub type HPDF_Free_Func =
    ::std::option::Option<unsafe extern "C" fn(aptr:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TextWidth {
    pub numchars: HPDF_UINT,
    pub numwords: HPDF_UINT,
    pub width: HPDF_UINT,
    pub numspace: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_TextWidth {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TextWidth {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TextWidth = Struct__HPDF_TextWidth;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_DashMode {
    pub ptn: [HPDF_UINT16; 8usize],
    pub num_ptn: HPDF_UINT,
    pub phase: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_DashMode {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_DashMode {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_DashMode = Struct__HPDF_DashMode;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TransMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub x: HPDF_REAL,
    pub y: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_TransMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TransMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TransMatrix = Struct__HPDF_TransMatrix;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_3DMatrix {
    pub a: HPDF_REAL,
    pub b: HPDF_REAL,
    pub c: HPDF_REAL,
    pub d: HPDF_REAL,
    pub e: HPDF_REAL,
    pub f: HPDF_REAL,
    pub g: HPDF_REAL,
    pub h: HPDF_REAL,
    pub i: HPDF_REAL,
    pub tx: HPDF_REAL,
    pub ty: HPDF_REAL,
    pub tz: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_3DMatrix {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_3DMatrix {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_3DMatrix = Struct__HPDF_3DMatrix;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_ColorSpace {
    HPDF_CS_DEVICE_GRAY = 0,
    HPDF_CS_DEVICE_RGB = 1,
    HPDF_CS_DEVICE_CMYK = 2,
    HPDF_CS_CAL_GRAY = 3,
    HPDF_CS_CAL_RGB = 4,
    HPDF_CS_LAB = 5,
    HPDF_CS_ICC_BASED = 6,
    HPDF_CS_SEPARATION = 7,
    HPDF_CS_DEVICE_N = 8,
    HPDF_CS_INDEXED = 9,
    HPDF_CS_PATTERN = 10,
    HPDF_CS_EOF = 11,
}
pub type HPDF_ColorSpace = Enum__HPDF_ColorSpace;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_RGBColor {
    pub r: HPDF_REAL,
    pub g: HPDF_REAL,
    pub b: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_RGBColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_RGBColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_RGBColor = Struct__HPDF_RGBColor;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CMYKColor {
    pub c: HPDF_REAL,
    pub m: HPDF_REAL,
    pub y: HPDF_REAL,
    pub k: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_CMYKColor {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CMYKColor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CMYKColor = Struct__HPDF_CMYKColor;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_LineCap {
    HPDF_BUTT_END = 0,
    HPDF_ROUND_END = 1,
    HPDF_PROJECTING_SCUARE_END = 2,
    HPDF_LINECAP_EOF = 3,
}
pub type HPDF_LineCap = Enum__HPDF_LineCap;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_LineJoin {
    HPDF_MITER_JOIN = 0,
    HPDF_ROUND_JOIN = 1,
    HPDF_BEVEL_JOIN = 2,
    HPDF_LINEJOIN_EOF = 3,
}
pub type HPDF_LineJoin = Enum__HPDF_LineJoin;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_TextRenderingMode {
    HPDF_FILL = 0,
    HPDF_STROKE = 1,
    HPDF_FILL_THEN_STROKE = 2,
    HPDF_INVISIBLE = 3,
    HPDF_FILL_CLIPPING = 4,
    HPDF_STROKE_CLIPPING = 5,
    HPDF_FILL_STROKE_CLIPPING = 6,
    HPDF_CLIPPING = 7,
    HPDF_RENDERING_MODE_EOF = 8,
}
pub type HPDF_TextRenderingMode = Enum__HPDF_TextRenderingMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_WritingMode {
    HPDF_WMODE_HORIZONTAL = 0,
    HPDF_WMODE_VERTICAL = 1,
    HPDF_WMODE_EOF = 2,
}
pub type HPDF_WritingMode = Enum__HPDF_WritingMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PageLayout {
    HPDF_PAGE_LAYOUT_SINGLE = 0,
    HPDF_PAGE_LAYOUT_ONE_COLUMN = 1,
    HPDF_PAGE_LAYOUT_TWO_COLUMN_LEFT = 2,
    HPDF_PAGE_LAYOUT_TWO_COLUMN_RIGHT = 3,
    HPDF_PAGE_LAYOUT_TWO_PAGE_LEFT = 4,
    HPDF_PAGE_LAYOUT_TWO_PAGE_RIGHT = 5,
    HPDF_PAGE_LAYOUT_EOF = 6,
}
pub type HPDF_PageLayout = Enum__HPDF_PageLayout;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PageMode {
    HPDF_PAGE_MODE_USE_NONE = 0,
    HPDF_PAGE_MODE_USE_OUTLINE = 1,
    HPDF_PAGE_MODE_USE_THUMBS = 2,
    HPDF_PAGE_MODE_FULL_SCREEN = 3,
    HPDF_PAGE_MODE_EOF = 4,
}
pub type HPDF_PageMode = Enum__HPDF_PageMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PageNumStyle {
    HPDF_PAGE_NUM_STYLE_DECIMAL = 0,
    HPDF_PAGE_NUM_STYLE_UPPER_ROMAN = 1,
    HPDF_PAGE_NUM_STYLE_LOWER_ROMAN = 2,
    HPDF_PAGE_NUM_STYLE_UPPER_LETTERS = 3,
    HPDF_PAGE_NUM_STYLE_LOWER_LETTERS = 4,
    HPDF_PAGE_NUM_STYLE_EOF = 5,
}
pub type HPDF_PageNumStyle = Enum__HPDF_PageNumStyle;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_DestinationType {
    HPDF_XYZ = 0,
    HPDF_FIT = 1,
    HPDF_FIT_H = 2,
    HPDF_FIT_V = 3,
    HPDF_FIT_R = 4,
    HPDF_FIT_B = 5,
    HPDF_FIT_BH = 6,
    HPDF_FIT_BV = 7,
    HPDF_DST_EOF = 8,
}
pub type HPDF_DestinationType = Enum__HPDF_DestinationType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_AnnotType {
    HPDF_ANNOT_TEXT_NOTES = 0,
    HPDF_ANNOT_LINK = 1,
    HPDF_ANNOT_SOUND = 2,
    HPDF_ANNOT_FREE_TEXT = 3,
    HPDF_ANNOT_STAMP = 4,
    HPDF_ANNOT_SQUARE = 5,
    HPDF_ANNOT_CIRCLE = 6,
    HPDF_ANNOT_STRIKE_OUT = 7,
    HPDF_ANNOT_HIGHTLIGHT = 8,
    HPDF_ANNOT_UNDERLINE = 9,
    HPDF_ANNOT_INK = 10,
    HPDF_ANNOT_FILE_ATTACHMENT = 11,
    HPDF_ANNOT_POPUP = 12,
    HPDF_ANNOT_3D = 13,
    HPDF_ANNOT_SQUIGGLY = 14,
    HPDF_ANNOT_LINE = 15,
    HPDF_ANNOT_PROJECTION = 16,
    HPDF_ANNOT_WIDGET = 17,
}
pub type HPDF_AnnotType = Enum__HPDF_AnnotType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_AnnotFlgs {
    HPDF_ANNOT_INVISIBLE = 0,
    HPDF_ANNOT_HIDDEN = 1,
    HPDF_ANNOT_PRINT = 2,
    HPDF_ANNOT_NOZOOM = 3,
    HPDF_ANNOT_NOROTATE = 4,
    HPDF_ANNOT_NOVIEW = 5,
    HPDF_ANNOT_READONLY = 6,
}
pub type HPDF_AnnotFlgs = Enum__HPDF_AnnotFlgs;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_AnnotHighlightMode {
    HPDF_ANNOT_NO_HIGHTLIGHT = 0,
    HPDF_ANNOT_INVERT_BOX = 1,
    HPDF_ANNOT_INVERT_BORDER = 2,
    HPDF_ANNOT_DOWN_APPEARANCE = 3,
    HPDF_ANNOT_HIGHTLIGHT_MODE_EOF = 4,
}
pub type HPDF_AnnotHighlightMode = Enum__HPDF_AnnotHighlightMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_AnnotIcon {
    HPDF_ANNOT_ICON_COMMENT = 0,
    HPDF_ANNOT_ICON_KEY = 1,
    HPDF_ANNOT_ICON_NOTE = 2,
    HPDF_ANNOT_ICON_HELP = 3,
    HPDF_ANNOT_ICON_NEW_PARAGRAPH = 4,
    HPDF_ANNOT_ICON_PARAGRAPH = 5,
    HPDF_ANNOT_ICON_INSERT = 6,
    HPDF_ANNOT_ICON_EOF = 7,
}
pub type HPDF_AnnotIcon = Enum__HPDF_AnnotIcon;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_AnnotIntent {
    HPDF_ANNOT_INTENT_FREETEXTCALLOUT = 0,
    HPDF_ANNOT_INTENT_FREETEXTTYPEWRITER = 1,
    HPDF_ANNOT_INTENT_LINEARROW = 2,
    HPDF_ANNOT_INTENT_LINEDIMENSION = 3,
    HPDF_ANNOT_INTENT_POLYGONCLOUD = 4,
    HPDF_ANNOT_INTENT_POLYLINEDIMENSION = 5,
    HPDF_ANNOT_INTENT_POLYGONDIMENSION = 6,
}
pub type HPDF_AnnotIntent = Enum__HPDF_AnnotIntent;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_LineAnnotEndingStyle {
    HPDF_LINE_ANNOT_NONE = 0,
    HPDF_LINE_ANNOT_SQUARE = 1,
    HPDF_LINE_ANNOT_CIRCLE = 2,
    HPDF_LINE_ANNOT_DIAMOND = 3,
    HPDF_LINE_ANNOT_OPENARROW = 4,
    HPDF_LINE_ANNOT_CLOSEDARROW = 5,
    HPDF_LINE_ANNOT_BUTT = 6,
    HPDF_LINE_ANNOT_ROPENARROW = 7,
    HPDF_LINE_ANNOT_RCLOSEDARROW = 8,
    HPDF_LINE_ANNOT_SLASH = 9,
}
pub type HPDF_LineAnnotEndingStyle = Enum__HPDF_LineAnnotEndingStyle;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_LineAnnotCapPosition {
    HPDF_LINE_ANNOT_CAP_INLINE = 0,
    HPDF_LINE_ANNOT_CAP_TOP = 1,
}
pub type HPDF_LineAnnotCapPosition = Enum__HPDF_LineAnnotCapPosition;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_StampAnnotName {
    HPDF_STAMP_ANNOT_APPROVED = 0,
    HPDF_STAMP_ANNOT_EXPERIMENTAL = 1,
    HPDF_STAMP_ANNOT_NOTAPPROVED = 2,
    HPDF_STAMP_ANNOT_ASIS = 3,
    HPDF_STAMP_ANNOT_EXPIRED = 4,
    HPDF_STAMP_ANNOT_NOTFORPUBLICRELEASE = 5,
    HPDF_STAMP_ANNOT_CONFIDENTIAL = 6,
    HPDF_STAMP_ANNOT_FINAL = 7,
    HPDF_STAMP_ANNOT_SOLD = 8,
    HPDF_STAMP_ANNOT_DEPARTMENTAL = 9,
    HPDF_STAMP_ANNOT_FORCOMMENT = 10,
    HPDF_STAMP_ANNOT_TOPSECRET = 11,
    HPDF_STAMP_ANNOT_DRAFT = 12,
    HPDF_STAMP_ANNOT_FORPUBLICRELEASE = 13,
}
pub type HPDF_StampAnnotName = Enum__HPDF_StampAnnotName;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_BSSubtype {
    HPDF_BS_SOLID = 0,
    HPDF_BS_DASHED = 1,
    HPDF_BS_BEVELED = 2,
    HPDF_BS_INSET = 3,
    HPDF_BS_UNDERLINED = 4,
}
pub type HPDF_BSSubtype = Enum__HPDF_BSSubtype;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_BlendMode {
    HPDF_BM_NORMAL = 0,
    HPDF_BM_MULTIPLY = 1,
    HPDF_BM_SCREEN = 2,
    HPDF_BM_OVERLAY = 3,
    HPDF_BM_DARKEN = 4,
    HPDF_BM_LIGHTEN = 5,
    HPDF_BM_COLOR_DODGE = 6,
    HPDF_BM_COLOR_BUM = 7,
    HPDF_BM_HARD_LIGHT = 8,
    HPDF_BM_SOFT_LIGHT = 9,
    HPDF_BM_DIFFERENCE = 10,
    HPDF_BM_EXCLUSHON = 11,
    HPDF_BM_EOF = 12,
}
pub type HPDF_BlendMode = Enum__HPDF_BlendMode;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_TransitionStyle {
    HPDF_TS_WIPE_RIGHT = 0,
    HPDF_TS_WIPE_UP = 1,
    HPDF_TS_WIPE_LEFT = 2,
    HPDF_TS_WIPE_DOWN = 3,
    HPDF_TS_BARN_DOORS_HORIZONTAL_OUT = 4,
    HPDF_TS_BARN_DOORS_HORIZONTAL_IN = 5,
    HPDF_TS_BARN_DOORS_VERTICAL_OUT = 6,
    HPDF_TS_BARN_DOORS_VERTICAL_IN = 7,
    HPDF_TS_BOX_OUT = 8,
    HPDF_TS_BOX_IN = 9,
    HPDF_TS_BLINDS_HORIZONTAL = 10,
    HPDF_TS_BLINDS_VERTICAL = 11,
    HPDF_TS_DISSOLVE = 12,
    HPDF_TS_GLITTER_RIGHT = 13,
    HPDF_TS_GLITTER_DOWN = 14,
    HPDF_TS_GLITTER_TOP_LEFT_TO_BOTTOM_RIGHT = 15,
    HPDF_TS_REPLACE = 16,
    HPDF_TS_EOF = 17,
}
pub type HPDF_TransitionStyle = Enum__HPDF_TransitionStyle;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PageSizes {
    HPDF_PAGE_SIZE_LETTER = 0,
    HPDF_PAGE_SIZE_LEGAL = 1,
    HPDF_PAGE_SIZE_A3 = 2,
    HPDF_PAGE_SIZE_A4 = 3,
    HPDF_PAGE_SIZE_A5 = 4,
    HPDF_PAGE_SIZE_B4 = 5,
    HPDF_PAGE_SIZE_B5 = 6,
    HPDF_PAGE_SIZE_EXECUTIVE = 7,
    HPDF_PAGE_SIZE_US4x6 = 8,
    HPDF_PAGE_SIZE_US4x8 = 9,
    HPDF_PAGE_SIZE_US5x7 = 10,
    HPDF_PAGE_SIZE_COMM10 = 11,
    HPDF_PAGE_SIZE_EOF = 12,
}
pub type HPDF_PageSizes = Enum__HPDF_PageSizes;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_PageDirection {
    HPDF_PAGE_PORTRAIT = 0,
    HPDF_PAGE_LANDSCAPE = 1,
}
pub type HPDF_PageDirection = Enum__HPDF_PageDirection;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_EncoderType {
    HPDF_ENCODER_TYPE_SINGLE_BYTE = 0,
    HPDF_ENCODER_TYPE_DOUBLE_BYTE = 1,
    HPDF_ENCODER_TYPE_UNINITIALIZED = 2,
    HPDF_ENCODER_UNKNOWN = 3,
}
pub type HPDF_EncoderType = Enum__HPDF_EncoderType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_ByteType {
    HPDF_BYTE_TYPE_SINGLE = 0,
    HPDF_BYTE_TYPE_LEAD = 1,
    HPDF_BYTE_TYPE_TRIAL = 2,
    HPDF_BYTE_TYPE_UNKNOWN = 3,
}
pub type HPDF_ByteType = Enum__HPDF_ByteType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_TextAlignment {
    HPDF_TALIGN_LEFT = 0,
    HPDF_TALIGN_RIGHT = 1,
    HPDF_TALIGN_CENTER = 2,
    HPDF_TALIGN_JUSTIFY = 3,
}
pub type HPDF_TextAlignment = Enum__HPDF_TextAlignment;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_NameDictKey {
    HPDF_NAME_EMBEDDED_FILES = 0,
    HPDF_NAME_EOF = 1,
}
pub type HPDF_NameDictKey = Enum__HPDF_NameDictKey;
pub type HPDF_Error = *mut Struct__HPDF_Error_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Error_Rec {
    pub error_no: HPDF_STATUS,
    pub detail_no: HPDF_STATUS,
    pub error_fn: HPDF_Error_Handler,
    pub user_data: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Error_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Error_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Error_Rec = Struct__HPDF_Error_Rec;
pub type HPDF_MPool_Node = *mut Struct__HPDF_MPool_Node_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MPool_Node_Rec {
    pub buf: *mut HPDF_BYTE,
    pub size: HPDF_UINT,
    pub used_size: HPDF_UINT,
    pub next_node: HPDF_MPool_Node,
}
impl ::std::clone::Clone for Struct__HPDF_MPool_Node_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MPool_Node_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MPool_Node_Rec = Struct__HPDF_MPool_Node_Rec;
pub type HPDF_MMgr = *mut Struct__HPDF_MMgr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MMgr_Rec {
    pub error: HPDF_Error,
    pub alloc_fn: HPDF_Alloc_Func,
    pub free_fn: HPDF_Free_Func,
    pub mpool: HPDF_MPool_Node,
    pub buf_size: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_MMgr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MMgr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MMgr_Rec = Struct__HPDF_MMgr_Rec;
pub type HPDF_List = *mut Struct__HPDF_List_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_List_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub block_siz: HPDF_UINT,
    pub items_per_block: HPDF_UINT,
    pub count: HPDF_UINT,
    pub obj: *mut *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_List_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_List_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_List_Rec = Struct__HPDF_List_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_HPDF_MD5Context {
    pub buf: [HPDF_UINT32; 4usize],
    pub bits: [HPDF_UINT32; 2usize],
    pub _in: [HPDF_BYTE; 64usize],
}
impl ::std::clone::Clone for Struct_HPDF_MD5Context {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_HPDF_MD5Context {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MD5_CTX = Struct_HPDF_MD5Context;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_ARC4_Ctx_Rec {
    pub idx1: HPDF_BYTE,
    pub idx2: HPDF_BYTE,
    pub state: [HPDF_BYTE; 256usize],
}
impl ::std::clone::Clone for Struct__HPDF_ARC4_Ctx_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_ARC4_Ctx_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_ARC4_Ctx_Rec = Struct__HPDF_ARC4_Ctx_Rec;
pub type HPDF_Encrypt = *mut Struct__HPDF_Encrypt_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Encrypt_Rec {
    pub mode: HPDF_EncryptMode,
    pub key_len: HPDF_UINT,
    pub owner_passwd: [HPDF_BYTE; 32usize],
    pub user_passwd: [HPDF_BYTE; 32usize],
    pub owner_key: [HPDF_BYTE; 32usize],
    pub user_key: [HPDF_BYTE; 32usize],
    pub permission: HPDF_INT,
    pub encrypt_id: [HPDF_BYTE; 16usize],
    pub encryption_key: [HPDF_BYTE; 21usize],
    pub md5_encryption_key: [HPDF_BYTE; 16usize],
    pub arc4ctx: HPDF_ARC4_Ctx_Rec,
}
impl ::std::clone::Clone for Struct__HPDF_Encrypt_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Encrypt_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Encrypt_Rec = Struct__HPDF_Encrypt_Rec;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_StreamType {
    HPDF_STREAM_UNKNOWN = 0,
    HPDF_STREAM_CALLBACK = 1,
    HPDF_STREAM_FILE = 2,
    HPDF_STREAM_MEMORY = 3,
}
pub type HPDF_StreamType = Enum__HPDF_StreamType;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_WhenceMode {
    HPDF_SEEK_SET = 0,
    HPDF_SEEK_CUR = 1,
    HPDF_SEEK_END = 2,
}
pub type HPDF_WhenceMode = Enum__HPDF_WhenceMode;
pub type HPDF_Stream = *mut Struct__HPDF_Stream_Rec;
pub type HPDF_Stream_Write_Func =
    ::std::option::Option<unsafe extern "C" fn(stream: HPDF_Stream,
                                               ptr: *const HPDF_BYTE,
                                               siz: HPDF_UINT)
                              -> HPDF_STATUS>;
pub type HPDF_Stream_Read_Func =
    ::std::option::Option<unsafe extern "C" fn(stream: HPDF_Stream,
                                               ptr: *mut HPDF_BYTE,
                                               siz: *mut HPDF_UINT)
                              -> HPDF_STATUS>;
pub type HPDF_Stream_Seek_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream, pos: HPDF_INT,
                                        mode: HPDF_WhenceMode)
                              -> HPDF_STATUS>;
pub type HPDF_Stream_Tell_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream) -> HPDF_INT32>;
pub type HPDF_Stream_Free_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream)>;
pub type HPDF_Stream_Size_Func =
    ::std::option::Option<extern "C" fn(stream: HPDF_Stream) -> HPDF_UINT32>;
pub type HPDF_MemStreamAttr = *mut Struct__HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_MemStreamAttr_Rec {
    pub buf: HPDF_List,
    pub buf_siz: HPDF_UINT,
    pub w_pos: HPDF_UINT,
    pub w_ptr: *mut HPDF_BYTE,
    pub r_ptr_idx: HPDF_UINT,
    pub r_pos: HPDF_UINT,
    pub r_ptr: *mut HPDF_BYTE,
}
impl ::std::clone::Clone for Struct__HPDF_MemStreamAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_MemStreamAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_MemStreamAttr_Rec = Struct__HPDF_MemStreamAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Stream_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub _type: HPDF_StreamType,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub size: HPDF_UINT,
    pub write_fn: HPDF_Stream_Write_Func,
    pub read_fn: HPDF_Stream_Read_Func,
    pub seek_fn: HPDF_Stream_Seek_Func,
    pub free_fn: HPDF_Stream_Free_Func,
    pub tell_fn: HPDF_Stream_Tell_Func,
    pub size_fn: HPDF_Stream_Size_Func,
    pub attr: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Stream_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Stream_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Stream_Rec = Struct__HPDF_Stream_Rec;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_EncodingType {
    HPDF_STANDARD_ENCODING = 0,
    HPDF_MAC_ROMAN_ENCODING = 1,
    HPDF_WIN_ANSI_ENCODING = 2,
    HPDF_FONT_SPECIFIC = 3,
    HPDF_ENCODING_EOF = 4,
}
pub type HPDF_EncodingType = Enum__HPDF_EncodingType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_ParseText_Rec {
    pub text: *const HPDF_BYTE,
    pub index: HPDF_UINT,
    pub len: HPDF_UINT,
    pub byte_type: HPDF_ByteType,
}
impl ::std::clone::Clone for Struct__HPDF_ParseText_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_ParseText_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_ParseText_Rec = Struct__HPDF_ParseText_Rec;
pub type HPDF_Encoder = *mut Struct__HPDF_Encoder_Rec;
pub type HPDF_Encoder_ByteType_Func =
    ::std::option::Option<unsafe extern "C" fn(encoder: HPDF_Encoder,
                                               state: *mut HPDF_ParseText_Rec)
                              -> HPDF_ByteType>;
pub type HPDF_Encoder_ToUnicode_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        code: HPDF_UINT16) -> HPDF_UNICODE>;
pub type HPDF_Encoder_EncodeText_Func =
    ::std::option::Option<unsafe extern "C" fn(encoder: HPDF_Encoder,
                                               text:
                                                   *const ::std::os::raw::c_char,
                                               len: HPDF_UINT,
                                               encoded_length: *mut HPDF_UINT)
                              -> *mut ::std::os::raw::c_char>;
pub type HPDF_Encoder_Write_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder,
                                        out: HPDF_Stream) -> HPDF_STATUS>;
pub type HPDF_Encoder_Init_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder)
                              -> HPDF_STATUS>;
pub type HPDF_Encoder_Free_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder)>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Encoder_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub name: [::std::os::raw::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub _type: HPDF_EncoderType,
    pub byte_type_fn: HPDF_Encoder_ByteType_Func,
    pub to_unicode_fn: HPDF_Encoder_ToUnicode_Func,
    pub encode_text_fn: HPDF_Encoder_EncodeText_Func,
    pub write_fn: HPDF_Encoder_Write_Func,
    pub free_fn: HPDF_Encoder_Free_Func,
    pub init_fn: HPDF_Encoder_Init_Func,
    pub attr: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Encoder_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Encoder_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Encoder_Rec = Struct__HPDF_Encoder_Rec;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_BaseEncodings {
    HPDF_BASE_ENCODING_STANDARD = 0,
    HPDF_BASE_ENCODING_WIN_ANSI = 1,
    HPDF_BASE_ENCODING_MAC_ROMAN = 2,
    HPDF_BASE_ENCODING_FONT_SPECIFIC = 3,
    HPDF_BASE_ENCODING_EOF = 4,
}
pub type HPDF_BaseEncodings = Enum__HPDF_BaseEncodings;
pub type HPDF_BasicEncoderAttr = *mut Struct__HPDF_BasicEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_BasicEncoderAttr_Rec {
    pub base_encoding: [::std::os::raw::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub unicode_map: [HPDF_UNICODE; 256usize],
    pub has_differences: HPDF_BOOL,
    pub differences: [HPDF_BYTE; 256usize],
}
impl ::std::clone::Clone for Struct__HPDF_BasicEncoderAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_BasicEncoderAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_BasicEncoderAttr_Rec = Struct__HPDF_BasicEncoderAttr_Rec;
pub type HPDF_CMapEncoder_ByteType_Func =
    ::std::option::Option<extern "C" fn(encoder: HPDF_Encoder, b: HPDF_BYTE)
                              -> HPDF_BOOL>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CidRange_Rec {
    pub from: HPDF_UINT16,
    pub to: HPDF_UINT16,
    pub cid: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_CidRange_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CidRange_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CidRange_Rec = Struct__HPDF_CidRange_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_UnicodeMap_Rec {
    pub code: HPDF_UINT16,
    pub unicode: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_UnicodeMap_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_UnicodeMap_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_UnicodeMap_Rec = Struct__HPDF_UnicodeMap_Rec;
pub type HPDF_CMapEncoderAttr = *mut Struct__HPDF_CMapEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CMapEncoderAttr_Rec {
    pub unicode_map: [[HPDF_UNICODE; 256usize]; 256usize],
    pub cid_map: [[HPDF_UINT16; 256usize]; 256usize],
    pub jww_line_head: [HPDF_UINT16; 128usize],
    pub cmap_range: HPDF_List,
    pub notdef_range: HPDF_List,
    pub code_space_range: HPDF_List,
    pub writing_mode: HPDF_WritingMode,
    pub registry: [::std::os::raw::c_char; 128usize],
    pub ordering: [::std::os::raw::c_char; 128usize],
    pub suppliment: HPDF_INT,
    pub is_lead_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub is_trial_byte_fn: HPDF_CMapEncoder_ByteType_Func,
    pub uid_offset: HPDF_INT,
    pub xuid: [HPDF_UINT; 3usize],
}
impl ::std::clone::Clone for Struct__HPDF_CMapEncoderAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CMapEncoderAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CMapEncoderAttr_Rec = Struct__HPDF_CMapEncoderAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Obj_Header {
    pub obj_id: HPDF_UINT32,
    pub gen_no: HPDF_UINT16,
    pub obj_class: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_Obj_Header {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Obj_Header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Obj_Header = Struct__HPDF_Obj_Header;
pub type HPDF_Null = *mut Struct__HPDF_Null_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Null_Rec {
    pub header: HPDF_Obj_Header,
}
impl ::std::clone::Clone for Struct__HPDF_Null_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Null_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Null_Rec = Struct__HPDF_Null_Rec;
pub type HPDF_Boolean = *mut Struct__HPDF_Boolean_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Boolean_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_BOOL,
}
impl ::std::clone::Clone for Struct__HPDF_Boolean_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Boolean_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Boolean_Rec = Struct__HPDF_Boolean_Rec;
pub type HPDF_Number = *mut Struct__HPDF_Number_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Number_Rec {
    pub header: HPDF_Obj_Header,
    pub value: HPDF_INT32,
}
impl ::std::clone::Clone for Struct__HPDF_Number_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Number_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Number_Rec = Struct__HPDF_Number_Rec;
pub type HPDF_Real = *mut Struct__HPDF_Real_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Real_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: HPDF_REAL,
}
impl ::std::clone::Clone for Struct__HPDF_Real_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Real_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Real_Rec = Struct__HPDF_Real_Rec;
pub type HPDF_Name = *mut Struct__HPDF_Name_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Name_Rec {
    pub header: HPDF_Obj_Header,
    pub error: HPDF_Error,
    pub value: [::std::os::raw::c_char; 128usize],
}
impl ::std::clone::Clone for Struct__HPDF_Name_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Name_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Name_Rec = Struct__HPDF_Name_Rec;
pub type HPDF_String = *mut Struct__HPDF_String_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_String_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub encoder: HPDF_Encoder,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_String_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_String_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_String_Rec = Struct__HPDF_String_Rec;
pub type HPDF_Binary = *mut Struct__HPDF_Binary_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Binary_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub value: *mut HPDF_BYTE,
    pub len: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_Binary_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Binary_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Binary_Rec = Struct__HPDF_Binary_Rec;
pub type HPDF_Array = *mut Struct__HPDF_Array_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Array_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
}
impl ::std::clone::Clone for Struct__HPDF_Array_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Array_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Array_Rec = Struct__HPDF_Array_Rec;
pub type HPDF_Xref = *mut Struct__HPDF_Xref_Rec;
pub type HPDF_Dict = *mut Struct__HPDF_Dict_Rec;
pub type HPDF_Dict_FreeFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict)>;
pub type HPDF_Dict_BeforeWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_AfterWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict) -> HPDF_STATUS>;
pub type HPDF_Dict_OnWriteFunc =
    ::std::option::Option<extern "C" fn(obj: HPDF_Dict, stream: HPDF_Stream)
                              -> HPDF_STATUS>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Dict_Rec {
    pub header: HPDF_Obj_Header,
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub list: HPDF_List,
    pub before_write_fn: HPDF_Dict_BeforeWriteFunc,
    pub write_fn: HPDF_Dict_OnWriteFunc,
    pub after_write_fn: HPDF_Dict_AfterWriteFunc,
    pub free_fn: HPDF_Dict_FreeFunc,
    pub stream: HPDF_Stream,
    pub filter: HPDF_UINT,
    pub filterParams: HPDF_Dict,
    pub attr: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Dict_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Dict_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Dict_Rec = Struct__HPDF_Dict_Rec;
pub type HPDF_DictElement = *mut Struct__HPDF_DictElement_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_DictElement_Rec {
    pub key: [::std::os::raw::c_char; 128usize],
    pub value: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_DictElement_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_DictElement_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_DictElement_Rec = Struct__HPDF_DictElement_Rec;
pub type HPDF_Proxy = *mut Struct__HPDF_Proxy_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Proxy_Rec {
    pub header: HPDF_Obj_Header,
    pub obj: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_Proxy_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Proxy_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Proxy_Rec = Struct__HPDF_Proxy_Rec;
pub type HPDF_XrefEntry = *mut Struct__HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_XrefEntry_Rec {
    pub entry_typ: ::std::os::raw::c_char,
    pub byte_offset: HPDF_UINT,
    pub gen_no: HPDF_UINT16,
    pub obj: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_XrefEntry_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_XrefEntry_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_XrefEntry_Rec = Struct__HPDF_XrefEntry_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Xref_Rec {
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub start_offset: HPDF_UINT32,
    pub entries: HPDF_List,
    pub addr: HPDF_UINT,
    pub prev: HPDF_Xref,
    pub trailer: HPDF_Dict,
}
impl ::std::clone::Clone for Struct__HPDF_Xref_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Xref_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Xref_Rec = Struct__HPDF_Xref_Rec;
pub type HPDF_EmbeddedFile = HPDF_Dict;
pub type HPDF_NameDict = HPDF_Dict;
pub type HPDF_NameTree = HPDF_Dict;
pub type HPDF_Pages = HPDF_Dict;
pub type HPDF_Page = HPDF_Dict;
pub type HPDF_Annotation = HPDF_Dict;
pub type HPDF_3DMeasure = HPDF_Dict;
pub type HPDF_ExData = HPDF_Dict;
pub type HPDF_XObject = HPDF_Dict;
pub type HPDF_Image = HPDF_Dict;
pub type HPDF_Outline = HPDF_Dict;
pub type HPDF_EncryptDict = HPDF_Dict;
pub type HPDF_Action = HPDF_Dict;
pub type HPDF_ExtGState = HPDF_Dict;
pub type HPDF_Destination = HPDF_Array;
pub type HPDF_U3D = HPDF_Dict;
pub type HPDF_OutputIntent = HPDF_Dict;
pub type HPDF_JavaScript = HPDF_Dict;
pub type HPDF_Catalog = HPDF_Dict;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CharData {
    pub char_cd: HPDF_INT16,
    pub unicode: HPDF_UNICODE,
    pub width: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_CharData {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CharData {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CharData = Struct__HPDF_CharData;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_FontDefType {
    HPDF_FONTDEF_TYPE_TYPE1 = 0,
    HPDF_FONTDEF_TYPE_TRUETYPE = 1,
    HPDF_FONTDEF_TYPE_CID = 2,
    HPDF_FONTDEF_TYPE_UNINITIALIZED = 3,
    HPDF_FONTDEF_TYPE_EOF = 4,
}
pub type HPDF_FontDefType = Enum__HPDF_FontDefType;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CID_Width {
    pub cid: HPDF_UINT16,
    pub width: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_CID_Width {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CID_Width {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CID_Width = Struct__HPDF_CID_Width;
pub type HPDF_FontDef = *mut Struct__HPDF_FontDef_Rec;
pub type HPDF_FontDef_FreeFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef)>;
pub type HPDF_FontDef_CleanFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef)>;
pub type HPDF_FontDef_InitFunc =
    ::std::option::Option<extern "C" fn(fontdef: HPDF_FontDef)
                              -> HPDF_STATUS>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_FontDef_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub base_font: [::std::os::raw::c_char; 128usize],
    pub mmgr: HPDF_MMgr,
    pub error: HPDF_Error,
    pub _type: HPDF_FontDefType,
    pub clean_fn: HPDF_FontDef_CleanFunc,
    pub free_fn: HPDF_FontDef_FreeFunc,
    pub init_fn: HPDF_FontDef_InitFunc,
    pub ascent: HPDF_INT16,
    pub descent: HPDF_INT16,
    pub flags: HPDF_UINT,
    pub font_bbox: HPDF_Box,
    pub italic_angle: HPDF_INT16,
    pub stemv: HPDF_UINT16,
    pub avg_width: HPDF_INT16,
    pub max_width: HPDF_INT16,
    pub missing_width: HPDF_INT16,
    pub stemh: HPDF_UINT16,
    pub x_height: HPDF_UINT16,
    pub cap_height: HPDF_UINT16,
    pub descriptor: HPDF_Dict,
    pub data: HPDF_Stream,
    pub valid: HPDF_BOOL,
    pub attr: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct__HPDF_FontDef_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_FontDef_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_FontDef_Rec = Struct__HPDF_FontDef_Rec;
pub type HPDF_Type1FontDefAttr = *mut Struct__HPDF_Type1FontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Type1FontDefAttrRec {
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub widths: *mut HPDF_CharData,
    pub widths_count: HPDF_UINT,
    pub leading: HPDF_INT16,
    pub char_set: *mut ::std::os::raw::c_char,
    pub encoding_scheme: [::std::os::raw::c_char; 128usize],
    pub length1: HPDF_UINT,
    pub length2: HPDF_UINT,
    pub length3: HPDF_UINT,
    pub is_base14font: HPDF_BOOL,
    pub is_fixed_pitch: HPDF_BOOL,
    pub font_data: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_Type1FontDefAttrRec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Type1FontDefAttrRec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Type1FontDefAttr_Rec = Struct__HPDF_Type1FontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_Table {
    pub tag: [::std::os::raw::c_char; 4usize],
    pub check_sum: HPDF_UINT32,
    pub offset: HPDF_UINT32,
    pub length: HPDF_UINT32,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_Table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_Table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTFTable = Struct__HPDF_TTF_Table;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_OffsetTbl {
    pub sfnt_version: HPDF_UINT32,
    pub num_tables: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub table: *mut HPDF_TTFTable,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_OffsetTbl {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_OffsetTbl {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_OffsetTbl = Struct__HPDF_TTF_OffsetTbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_CmapRange {
    pub format: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub language: HPDF_UINT16,
    pub seg_count_x2: HPDF_UINT16,
    pub search_range: HPDF_UINT16,
    pub entry_selector: HPDF_UINT16,
    pub range_shift: HPDF_UINT16,
    pub end_count: *mut HPDF_UINT16,
    pub reserved_pad: HPDF_UINT16,
    pub start_count: *mut HPDF_UINT16,
    pub id_delta: *mut HPDF_INT16,
    pub id_range_offset: *mut HPDF_UINT16,
    pub glyph_id_array: *mut HPDF_UINT16,
    pub glyph_id_array_count: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_CmapRange {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_CmapRange {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_CmapRange = Struct__HPDF_TTF_CmapRange;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_GryphOffsets {
    pub base_offset: HPDF_UINT32,
    pub offsets: *mut HPDF_UINT32,
    pub flgs: *mut HPDF_BYTE,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_GryphOffsets {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_GryphOffsets {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_GryphOffsets = Struct__HPDF_TTF_GryphOffsets;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_LongHorMetric {
    pub advance_width: HPDF_UINT16,
    pub lsb: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_LongHorMetric {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_LongHorMetric {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_LongHorMetric = Struct__HPDF_TTF_LongHorMetric;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_FontHeader {
    pub version_number: [HPDF_BYTE; 4usize],
    pub font_revision: HPDF_UINT32,
    pub check_sum_adjustment: HPDF_UINT32,
    pub magic_number: HPDF_UINT32,
    pub flags: HPDF_UINT16,
    pub units_per_em: HPDF_UINT16,
    pub created: [HPDF_BYTE; 8usize],
    pub modified: [HPDF_BYTE; 8usize],
    pub x_min: HPDF_INT16,
    pub y_min: HPDF_INT16,
    pub x_max: HPDF_INT16,
    pub y_max: HPDF_INT16,
    pub mac_style: HPDF_UINT16,
    pub lowest_rec_ppem: HPDF_UINT16,
    pub font_direction_hint: HPDF_INT16,
    pub index_to_loc_format: HPDF_INT16,
    pub glyph_data_format: HPDF_INT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_FontHeader {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_FontHeader {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_FontHeader = Struct__HPDF_TTF_FontHeader;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_NameRecord {
    pub platform_id: HPDF_UINT16,
    pub encoding_id: HPDF_UINT16,
    pub language_id: HPDF_UINT16,
    pub name_id: HPDF_UINT16,
    pub length: HPDF_UINT16,
    pub offset: HPDF_UINT16,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_NameRecord {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_NameRecord {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_NameRecord = Struct__HPDF_TTF_NameRecord;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTF_NamingTable {
    pub format: HPDF_UINT16,
    pub count: HPDF_UINT16,
    pub string_offset: HPDF_UINT16,
    pub name_records: *mut HPDF_TTF_NameRecord,
}
impl ::std::clone::Clone for Struct__HPDF_TTF_NamingTable {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTF_NamingTable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTF_NamingTable = Struct__HPDF_TTF_NamingTable;
pub type HPDF_TTFontDefAttr = *mut Struct__HPDF_TTFontDefAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_TTFontDefAttr_Rec {
    pub base_font: [::std::os::raw::c_char; 128usize],
    pub first_char: HPDF_BYTE,
    pub last_char: HPDF_BYTE,
    pub char_set: *mut ::std::os::raw::c_char,
    pub tag_name: [::std::os::raw::c_char; 7usize],
    pub tag_name2: [::std::os::raw::c_char; 14usize],
    pub header: HPDF_TTF_FontHeader,
    pub glyph_tbl: HPDF_TTF_GryphOffsets,
    pub num_glyphs: HPDF_UINT16,
    pub name_tbl: HPDF_TTF_NamingTable,
    pub h_metric: *mut HPDF_TTF_LongHorMetric,
    pub num_h_metric: HPDF_UINT16,
    pub offset_tbl: HPDF_TTF_OffsetTbl,
    pub cmap: HPDF_TTF_CmapRange,
    pub fs_type: HPDF_UINT16,
    pub sfamilyclass: [HPDF_BYTE; 2usize],
    pub panose: [HPDF_BYTE; 10usize],
    pub code_page_range1: HPDF_UINT32,
    pub code_page_range2: HPDF_UINT32,
    pub length1: HPDF_UINT,
    pub embedding: HPDF_BOOL,
    pub is_cidfont: HPDF_BOOL,
    pub stream: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_TTFontDefAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_TTFontDefAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_TTFontDefAttr_Rec = Struct__HPDF_TTFontDefAttr_Rec;
pub type HPDF_CIDFontDefAttr = *mut Struct__HPDF_CIDFontDefAttrRec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_CIDFontDefAttrRec {
    pub widths: HPDF_List,
    pub DW: HPDF_INT16,
    pub DW2: [HPDF_INT16; 2usize],
}
impl ::std::clone::Clone for Struct__HPDF_CIDFontDefAttrRec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_CIDFontDefAttrRec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_CIDFontDefAttr_Rec = Struct__HPDF_CIDFontDefAttrRec;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum__HPDF_FontType {
    HPDF_FONT_TYPE1 = 0,
    HPDF_FONT_TRUETYPE = 1,
    HPDF_FONT_TYPE3 = 2,
    HPDF_FONT_TYPE0_CID = 3,
    HPDF_FONT_TYPE0_TT = 4,
    HPDF_FONT_CID_TYPE0 = 5,
    HPDF_FONT_CID_TYPE2 = 6,
    HPDF_FONT_MMTYPE1 = 7,
}
pub type HPDF_FontType = Enum__HPDF_FontType;
pub type HPDF_Font = HPDF_Dict;
pub type HPDF_Font_TextWidths_Func =
    ::std::option::Option<unsafe extern "C" fn(font: HPDF_Font,
                                               text: *const HPDF_BYTE,
                                               len: HPDF_UINT)
                              -> HPDF_TextWidth>;
pub type HPDF_Font_MeasureText_Func =
    ::std::option::Option<unsafe extern "C" fn(font: HPDF_Font,
                                               text: *const HPDF_BYTE,
                                               len: HPDF_UINT,
                                               width: HPDF_REAL,
                                               fontsize: HPDF_REAL,
                                               charspace: HPDF_REAL,
                                               wordspace: HPDF_REAL,
                                               wordwrap: HPDF_BOOL,
                                               real_width: *mut HPDF_REAL)
                              -> HPDF_UINT>;
pub type HPDF_FontAttr = *mut Struct__HPDF_FontAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_FontAttr_Rec {
    pub _type: HPDF_FontType,
    pub writing_mode: HPDF_WritingMode,
    pub text_width_fn: HPDF_Font_TextWidths_Func,
    pub measure_text_fn: HPDF_Font_MeasureText_Func,
    pub fontdef: HPDF_FontDef,
    pub encoder: HPDF_Encoder,
    pub widths: *mut HPDF_INT16,
    pub used: *mut HPDF_BYTE,
    pub xref: HPDF_Xref,
    pub descendant_font: HPDF_Font,
    pub map_stream: HPDF_Dict,
    pub cmap_stream: HPDF_Dict,
}
impl ::std::clone::Clone for Struct__HPDF_FontAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_FontAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_FontAttr_Rec = Struct__HPDF_FontAttr_Rec;
pub type HPDF_GState = *mut Struct__HPDF_GState_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_GState_Rec {
    pub trans_matrix: HPDF_TransMatrix,
    pub line_width: HPDF_REAL,
    pub line_cap: HPDF_LineCap,
    pub line_join: HPDF_LineJoin,
    pub miter_limit: HPDF_REAL,
    pub dash_mode: HPDF_DashMode,
    pub flatness: HPDF_REAL,
    pub char_space: HPDF_REAL,
    pub word_space: HPDF_REAL,
    pub h_scalling: HPDF_REAL,
    pub text_leading: HPDF_REAL,
    pub rendering_mode: HPDF_TextRenderingMode,
    pub text_rise: HPDF_REAL,
    pub cs_fill: HPDF_ColorSpace,
    pub cs_stroke: HPDF_ColorSpace,
    pub rgb_fill: HPDF_RGBColor,
    pub rgb_stroke: HPDF_RGBColor,
    pub cmyk_fill: HPDF_CMYKColor,
    pub cmyk_stroke: HPDF_CMYKColor,
    pub gray_fill: HPDF_REAL,
    pub gray_stroke: HPDF_REAL,
    pub font: HPDF_Font,
    pub font_size: HPDF_REAL,
    pub writing_mode: HPDF_WritingMode,
    pub prev: HPDF_GState,
    pub depth: HPDF_UINT,
}
impl ::std::clone::Clone for Struct__HPDF_GState_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_GState_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_GState_Rec = Struct__HPDF_GState_Rec;
pub type HPDF_PageAttr = *mut Struct__HPDF_PageAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_PageAttr_Rec {
    pub parent: HPDF_Pages,
    pub fonts: HPDF_Dict,
    pub xobjects: HPDF_Dict,
    pub ext_gstates: HPDF_Dict,
    pub gstate: HPDF_GState,
    pub str_pos: HPDF_Point,
    pub cur_pos: HPDF_Point,
    pub text_pos: HPDF_Point,
    pub text_matrix: HPDF_TransMatrix,
    pub gmode: HPDF_UINT16,
    pub contents: HPDF_Dict,
    pub stream: HPDF_Stream,
    pub xref: HPDF_Xref,
    pub compression_mode: HPDF_UINT,
    pub ver: *mut HPDF_PDFVer,
}
impl ::std::clone::Clone for Struct__HPDF_PageAttr_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_PageAttr_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_PageAttr_Rec = Struct__HPDF_PageAttr_Rec;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__HPDF_Doc_Rec {
    pub sig_bytes: HPDF_UINT32,
    pub pdf_version: HPDF_PDFVer,
    pub mmgr: HPDF_MMgr,
    pub catalog: HPDF_Catalog,
    pub outlines: HPDF_Outline,
    pub xref: HPDF_Xref,
    pub root_pages: HPDF_Pages,
    pub cur_pages: HPDF_Pages,
    pub cur_page: HPDF_Page,
    pub page_list: HPDF_List,
    pub error: HPDF_Error_Rec,
    pub info: HPDF_Dict,
    pub trailer: HPDF_Dict,
    pub font_mgr: HPDF_List,
    pub ttfont_tag: [HPDF_BYTE; 6usize],
    pub fontdef_list: HPDF_List,
    pub encoder_list: HPDF_List,
    pub cur_encoder: HPDF_Encoder,
    pub compression_mode: HPDF_BOOL,
    pub encrypt_on: HPDF_BOOL,
    pub encrypt_dict: HPDF_EncryptDict,
    pub def_encoder: HPDF_Encoder,
    pub page_per_pages: HPDF_UINT,
    pub cur_page_num: HPDF_UINT,
    pub stream: HPDF_Stream,
}
impl ::std::clone::Clone for Struct__HPDF_Doc_Rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__HPDF_Doc_Rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HPDF_Doc_Rec = Struct__HPDF_Doc_Rec;
pub type HPDF_Doc = *mut Struct__HPDF_Doc_Rec;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn signal(arg1: ::std::os::raw::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int)>)>;
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t)
     -> ::std::os::raw::c_int;
    pub fn getiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut Struct_rlimit)
     -> ::std::os::raw::c_int;
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut Struct_rusage)
     -> ::std::os::raw::c_int;
    pub fn setpriority(arg1: ::std::os::raw::c_int, arg2: id_t,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const Struct_rlimit)
     -> ::std::os::raw::c_int;
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn wait3(arg1: *mut ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_int, arg3: *mut Struct_rusage)
     -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int, arg4: *mut Struct_rusage)
     -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn abort();
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn()>)
     -> ::std::os::raw::c_int;
    pub fn atof(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
    pub fn bsearch(arg1: *const ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: size_t,
                   arg4: size_t,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::std::os::raw::c_void;
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
    pub fn exit(arg1: ::std::os::raw::c_int);
    pub fn free(arg1: *mut ::std::os::raw::c_void);
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn mblen(arg1: *const ::std::os::raw::c_char, arg2: size_t)
     -> ::std::os::raw::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: size_t) -> ::std::os::raw::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::std::os::raw::c_void,
                          arg2: size_t, arg3: size_t)
     -> ::std::os::raw::c_int;
    pub fn qsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn rand() -> ::std::os::raw::c_int;
    pub fn realloc(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn srand(arg1: ::std::os::raw::c_uint);
    pub fn strtod(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtof(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_float;
    pub fn strtol(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_double;
    pub fn strtoll(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtoul(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
    pub fn strtoull(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
    pub fn _Exit(arg1: ::std::os::raw::c_int);
    pub fn a64l(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
    pub fn drand48() -> ::std::os::raw::c_double;
    pub fn ecvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_double;
    pub fn fcvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn gcvt(arg1: ::std::os::raw::c_double, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn getsubopt(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const *mut ::std::os::raw::c_char,
                     arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn initstate(arg1: ::std::os::raw::c_uint,
                     arg2: *mut ::std::os::raw::c_char, arg3: size_t)
     -> *mut ::std::os::raw::c_char;
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
    pub fn lrand48() -> ::std::os::raw::c_long;
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn mrand48() -> ::std::os::raw::c_long;
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn random() -> ::std::os::raw::c_long;
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn realpath(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
    pub fn setenv(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
    pub fn setstate(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
    pub fn srand48(arg1: ::std::os::raw::c_long);
    pub fn srandom(arg1: ::std::os::raw::c_uint);
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
    pub fn arc4random_buf(arg1: *mut ::std::os::raw::c_void, arg2: size_t);
    pub fn arc4random_stir();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    pub fn bsearch_b(arg1: *const ::std::os::raw::c_void,
                     arg2: *const ::std::os::raw::c_void, arg3: size_t,
                     arg4: size_t, arg5: ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn cgetcap(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn cgetclose() -> ::std::os::raw::c_int;
    pub fn cgetent(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetmatch(arg1: *const ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnext(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetnum(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
    pub fn cgetset(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn cgetustr(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t,
                     buf: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn getbsize(arg1: *mut ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
    pub fn getloadavg(arg1: *mut ::std::os::raw::c_double,
                      arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn getprogname() -> *const ::std::os::raw::c_char;
    pub fn heapsort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                    arg3: size_t,
                    arg4:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn heapsort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                      arg3: size_t, arg4: ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn mergesort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                     arg3: size_t,
                     arg4:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
    pub fn mergesort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                       arg3: size_t, arg4: ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
    pub fn psort(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                 arg3: size_t,
                 arg4:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
    pub fn psort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: ::std::os::raw::c_void);
    pub fn psort_r(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: *mut ::std::os::raw::c_void,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
    pub fn qsort_b(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: ::std::os::raw::c_void);
    pub fn qsort_r(arg1: *mut ::std::os::raw::c_void, arg2: size_t,
                   arg3: size_t, arg4: *mut ::std::os::raw::c_void,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
    pub fn radixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                     arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_uchar,
                     arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
    pub fn sradixsort(arg1: *mut *const ::std::os::raw::c_uchar,
                      arg2: ::std::os::raw::c_int,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    pub fn sranddev();
    pub fn srandomdev();
    pub fn reallocf(arg1: *mut ::std::os::raw::c_void, arg2: size_t)
     -> *mut ::std::os::raw::c_void;
    pub fn strtoq(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char,
                  arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
    pub fn strtouq(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::std::os::raw::c_void;
    pub fn HPDF_Error_Init(error: HPDF_Error,
                           user_data: *mut ::std::os::raw::c_void);
    pub fn HPDF_Error_Reset(error: HPDF_Error);
    pub fn HPDF_Error_GetCode(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_Error_GetDetailCode(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_SetError(error: HPDF_Error, error_no: HPDF_STATUS,
                         detail_no: HPDF_STATUS) -> HPDF_STATUS;
    pub fn HPDF_RaiseError(error: HPDF_Error, error_no: HPDF_STATUS,
                           detail_no: HPDF_STATUS) -> HPDF_STATUS;
    pub fn HPDF_MMgr_New(error: HPDF_Error, buf_size: HPDF_UINT,
                         alloc_fn: HPDF_Alloc_Func, free_fn: HPDF_Free_Func)
     -> HPDF_MMgr;
    pub fn HPDF_MMgr_Free(mmgr: HPDF_MMgr);
    pub fn HPDF_GetMem(mmgr: HPDF_MMgr, size: HPDF_UINT)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_FreeMem(mmgr: HPDF_MMgr, aptr: *mut ::std::os::raw::c_void);
    pub fn HPDF_List_New(mmgr: HPDF_MMgr, items_per_block: HPDF_UINT)
     -> HPDF_List;
    pub fn HPDF_List_Free(list: HPDF_List);
    pub fn HPDF_List_Add(list: HPDF_List, item: *mut ::std::os::raw::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_List_Insert(list: HPDF_List,
                            target: *mut ::std::os::raw::c_void,
                            item: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
    pub fn HPDF_List_Remove(list: HPDF_List,
                            item: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
    pub fn HPDF_List_RemoveByIndex(list: HPDF_List, index: HPDF_UINT)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_List_ItemAt(list: HPDF_List, index: HPDF_UINT)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_List_Find(list: HPDF_List, item: *mut ::std::os::raw::c_void)
     -> HPDF_INT32;
    pub fn HPDF_List_Clear(list: HPDF_List);
    pub fn HPDF_MD5Init(ctx: *mut Struct_HPDF_MD5Context);
    pub fn HPDF_MD5Update(ctx: *mut Struct_HPDF_MD5Context,
                          buf: *const HPDF_BYTE, len: HPDF_UINT32);
    pub fn HPDF_MD5Final(digest: *mut HPDF_BYTE,
                         ctx: *mut Struct_HPDF_MD5Context);
    pub fn HPDF_PadOrTrancatePasswd(pwd: *const ::std::os::raw::c_char,
                                    new_pwd: *mut HPDF_BYTE);
    pub fn HPDF_Encrypt_Init(attr: HPDF_Encrypt);
    pub fn HPDF_Encrypt_CreateUserKey(attr: HPDF_Encrypt);
    pub fn HPDF_Encrypt_CreateOwnerKey(attr: HPDF_Encrypt);
    pub fn HPDF_Encrypt_CreateEncryptionKey(attr: HPDF_Encrypt);
    pub fn HPDF_Encrypt_InitKey(attr: HPDF_Encrypt, object_id: HPDF_UINT32,
                                gen_no: HPDF_UINT16);
    pub fn HPDF_Encrypt_Reset(attr: HPDF_Encrypt);
    pub fn HPDF_Encrypt_CryptBuf(attr: HPDF_Encrypt, src: *const HPDF_BYTE,
                                 dst: *mut HPDF_BYTE, len: HPDF_UINT);
    pub fn HPDF_MemStream_New(mmgr: HPDF_MMgr, buf_siz: HPDF_UINT)
     -> HPDF_Stream;
    pub fn HPDF_MemStream_GetBufPtr(stream: HPDF_Stream, index: HPDF_UINT,
                                    length: *mut HPDF_UINT) -> *mut HPDF_BYTE;
    pub fn HPDF_MemStream_GetBufSize(stream: HPDF_Stream) -> HPDF_UINT;
    pub fn HPDF_MemStream_GetBufCount(stream: HPDF_Stream) -> HPDF_UINT;
    pub fn HPDF_MemStream_Rewrite(stream: HPDF_Stream, buf: *mut HPDF_BYTE,
                                  size: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_MemStream_FreeData(stream: HPDF_Stream);
    pub fn HPDF_Stream_WriteToStream(src: HPDF_Stream, dst: HPDF_Stream,
                                     filter: HPDF_UINT, e: HPDF_Encrypt)
     -> HPDF_STATUS;
    pub fn HPDF_FileReader_New(mmgr: HPDF_MMgr,
                               fname: *const ::std::os::raw::c_char)
     -> HPDF_Stream;
    pub fn HPDF_FileWriter_New(mmgr: HPDF_MMgr,
                               fname: *const ::std::os::raw::c_char)
     -> HPDF_Stream;
    pub fn HPDF_CallbackReader_New(mmgr: HPDF_MMgr,
                                   read_fn: HPDF_Stream_Read_Func,
                                   seek_fn: HPDF_Stream_Seek_Func,
                                   tell_fn: HPDF_Stream_Tell_Func,
                                   size_fn: HPDF_Stream_Size_Func,
                                   data: *mut ::std::os::raw::c_void)
     -> HPDF_Stream;
    pub fn HPDF_CallbackWriter_New(mmgr: HPDF_MMgr,
                                   write_fn: HPDF_Stream_Write_Func,
                                   data: *mut ::std::os::raw::c_void)
     -> HPDF_Stream;
    pub fn HPDF_Stream_Free(stream: HPDF_Stream);
    pub fn HPDF_Stream_WriteChar(stream: HPDF_Stream,
                                 value: ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteStr(stream: HPDF_Stream,
                                value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteUChar(stream: HPDF_Stream, value: HPDF_BYTE)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteInt(stream: HPDF_Stream, value: HPDF_INT)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteUInt(stream: HPDF_Stream, value: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteReal(stream: HPDF_Stream, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_Write(stream: HPDF_Stream, ptr: *const HPDF_BYTE,
                             size: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_Read(stream: HPDF_Stream, ptr: *mut HPDF_BYTE,
                            size: *mut HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_ReadLn(stream: HPDF_Stream,
                              s: *mut ::std::os::raw::c_char,
                              size: *mut HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_Tell(stream: HPDF_Stream) -> HPDF_INT32;
    pub fn HPDF_Stream_Seek(stream: HPDF_Stream, pos: HPDF_INT,
                            mode: HPDF_WhenceMode) -> HPDF_STATUS;
    pub fn HPDF_Stream_EOF(stream: HPDF_Stream) -> HPDF_BOOL;
    pub fn HPDF_Stream_Size(stream: HPDF_Stream) -> HPDF_UINT32;
    pub fn HPDF_Stream_Flush(stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeName(stream: HPDF_Stream,
                                       value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeText2(stream: HPDF_Stream,
                                        text: *const ::std::os::raw::c_char,
                                        len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteEscapeText(stream: HPDF_Stream,
                                       text: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Stream_WriteBinary(stream: HPDF_Stream,
                                   data: *const HPDF_BYTE, len: HPDF_UINT,
                                   e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Stream_Validate(stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_Encoder_Validate(encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_Encoder_SetParseText(encoder: HPDF_Encoder,
                                     state: *mut HPDF_ParseText_Rec,
                                     text: *const HPDF_BYTE, len: HPDF_UINT);
    pub fn HPDF_Encoder_ByteType(encoder: HPDF_Encoder,
                                 state: *mut HPDF_ParseText_Rec)
     -> HPDF_ByteType;
    pub fn HPDF_Encoder_ToUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UNICODE;
    pub fn HPDF_Encoder_Free(encoder: HPDF_Encoder);
    pub fn HPDF_BasicEncoder_New(mmgr: HPDF_MMgr,
                                 encoding_name: *const ::std::os::raw::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_BasicEncoder_Free(encoder: HPDF_Encoder);
    pub fn HPDF_BasicEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_BasicEncoder_ToUnicode(encoder: HPDF_Encoder,
                                       code: HPDF_UINT16) -> HPDF_UNICODE;
    pub fn HPDF_CMapEncoder_New(mmgr: HPDF_MMgr,
                                name: *mut ::std::os::raw::c_char,
                                init_fn: HPDF_Encoder_Init_Func)
     -> HPDF_Encoder;
    pub fn HPDF_CMapEncoder_InitAttr(encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_Free(encoder: HPDF_Encoder);
    pub fn HPDF_CMapEncoder_Write(encoder: HPDF_Encoder, out: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_ToUnicode(encoder: HPDF_Encoder,
                                      code: HPDF_UINT16) -> HPDF_UNICODE;
    pub fn HPDF_CMapEncoder_ToCID(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UINT16;
    pub fn HPDF_CMapEncoder_SetParseText(encoder: HPDF_Encoder,
                                         state: *mut HPDF_ParseText_Rec,
                                         text: *const HPDF_BYTE,
                                         len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_ByteType(encoder: HPDF_Encoder,
                                     state: *mut HPDF_ParseText_Rec)
     -> HPDF_ByteType;
    pub fn HPDF_CMapEncoder_AddCMap(encoder: HPDF_Encoder,
                                    range: *const HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_AddNotDefRange(encoder: HPDF_Encoder,
                                           range: HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_AddCodeSpaceRange(encoder: HPDF_Encoder,
                                              range: HPDF_CidRange_Rec)
     -> HPDF_STATUS;
    pub fn HPDF_CMapEncoder_SetUnicodeArray(encoder: HPDF_Encoder,
                                            array1:
                                                *const HPDF_UnicodeMap_Rec);
    pub fn HPDF_CMapEncoder_AddJWWLineHead(encoder: HPDF_Encoder,
                                           code: *const HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_Encoder_CheckJWWLineHead(encoder: HPDF_Encoder,
                                         code: HPDF_UINT16) -> HPDF_BOOL;
    pub fn HPDF_UnicodeToGryphName(unicode: HPDF_UNICODE)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_GryphNameToUnicode(gryph_name: *const ::std::os::raw::c_char)
     -> HPDF_UNICODE;
    pub fn HPDF_Obj_WriteValue(obj: *mut ::std::os::raw::c_void,
                               stream: HPDF_Stream, e: HPDF_Encrypt)
     -> HPDF_STATUS;
    pub fn HPDF_Obj_Write(obj: *mut ::std::os::raw::c_void,
                          stream: HPDF_Stream, e: HPDF_Encrypt)
     -> HPDF_STATUS;
    pub fn HPDF_Obj_Free(mmgr: HPDF_MMgr, obj: *mut ::std::os::raw::c_void);
    pub fn HPDF_Obj_ForceFree(mmgr: HPDF_MMgr,
                              obj: *mut ::std::os::raw::c_void);
    pub fn HPDF_Null_New(mmgr: HPDF_MMgr) -> HPDF_Null;
    pub fn HPDF_Boolean_New(mmgr: HPDF_MMgr, value: HPDF_BOOL)
     -> HPDF_Boolean;
    pub fn HPDF_Boolean_Write(obj: HPDF_Boolean, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Number_New(mmgr: HPDF_MMgr, value: HPDF_INT32) -> HPDF_Number;
    pub fn HPDF_Number_SetValue(obj: HPDF_Number, value: HPDF_INT32);
    pub fn HPDF_Number_Write(obj: HPDF_Number, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Real_New(mmgr: HPDF_MMgr, value: HPDF_REAL) -> HPDF_Real;
    pub fn HPDF_Real_Write(obj: HPDF_Real, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Real_SetValue(obj: HPDF_Real, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Name_New(mmgr: HPDF_MMgr,
                         value: *const ::std::os::raw::c_char) -> HPDF_Name;
    pub fn HPDF_Name_SetValue(obj: HPDF_Name,
                              value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Name_Write(obj: HPDF_Name, stream: HPDF_Stream)
     -> HPDF_STATUS;
    pub fn HPDF_Name_GetValue(obj: HPDF_Name)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_String_New(mmgr: HPDF_MMgr,
                           value: *const ::std::os::raw::c_char,
                           encoder: HPDF_Encoder) -> HPDF_String;
    pub fn HPDF_String_SetValue(obj: HPDF_String,
                                value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_String_Free(obj: HPDF_String);
    pub fn HPDF_String_Write(obj: HPDF_String, stream: HPDF_Stream,
                             e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_String_Cmp(s1: HPDF_String, s2: HPDF_String) -> HPDF_INT32;
    pub fn HPDF_Binary_New(mmgr: HPDF_MMgr, value: *mut HPDF_BYTE,
                           len: HPDF_UINT) -> HPDF_Binary;
    pub fn HPDF_Binary_SetValue(obj: HPDF_Binary, value: *mut HPDF_BYTE,
                                len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Binary_GetValue(obj: HPDF_Binary) -> *mut HPDF_BYTE;
    pub fn HPDF_Binary_Free(obj: HPDF_Binary);
    pub fn HPDF_Binary_Write(obj: HPDF_Binary, stream: HPDF_Stream,
                             e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Binary_GetLen(obj: HPDF_Binary) -> HPDF_UINT;
    pub fn HPDF_Array_New(mmgr: HPDF_MMgr) -> HPDF_Array;
    pub fn HPDF_Box_Array_New(mmgr: HPDF_MMgr, _box: HPDF_Box) -> HPDF_Array;
    pub fn HPDF_Array_Free(array: HPDF_Array);
    pub fn HPDF_Array_Write(array: HPDF_Array, stream: HPDF_Stream,
                            e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Array_Add(array: HPDF_Array, obj: *mut ::std::os::raw::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_Array_Insert(array: HPDF_Array,
                             target: *mut ::std::os::raw::c_void,
                             obj: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
    pub fn HPDF_Array_GetItem(array: HPDF_Array, index: HPDF_UINT,
                              obj_class: HPDF_UINT16)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_Array_AddNumber(array: HPDF_Array, value: HPDF_INT32)
     -> HPDF_STATUS;
    pub fn HPDF_Array_AddReal(array: HPDF_Array, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Array_AddNull(array: HPDF_Array) -> HPDF_STATUS;
    pub fn HPDF_Array_AddName(array: HPDF_Array,
                              value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Array_Clear(array: HPDF_Array);
    pub fn HPDF_Array_Items(array: HPDF_Array) -> HPDF_UINT;
    pub fn HPDF_Dict_New(mmgr: HPDF_MMgr) -> HPDF_Dict;
    pub fn HPDF_DictStream_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
    pub fn HPDF_Dict_Free(dict: HPDF_Dict);
    pub fn HPDF_Dict_Write(dict: HPDF_Dict, stream: HPDF_Stream,
                           e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Dict_GetKeyByObj(dict: HPDF_Dict,
                                 obj: *mut ::std::os::raw::c_void)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Dict_Add(dict: HPDF_Dict, key: *const ::std::os::raw::c_char,
                         obj: *mut ::std::os::raw::c_void) -> HPDF_STATUS;
    pub fn HPDF_Dict_GetItem(dict: HPDF_Dict,
                             key: *const ::std::os::raw::c_char,
                             obj_class: HPDF_UINT16)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_Dict_AddName(dict: HPDF_Dict,
                             key: *const ::std::os::raw::c_char,
                             value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Dict_AddNumber(dict: HPDF_Dict,
                               key: *const ::std::os::raw::c_char,
                               value: HPDF_INT32) -> HPDF_STATUS;
    pub fn HPDF_Dict_AddReal(dict: HPDF_Dict,
                             key: *const ::std::os::raw::c_char,
                             value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Dict_AddBoolean(dict: HPDF_Dict,
                                key: *const ::std::os::raw::c_char,
                                value: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_Dict_RemoveElement(dict: HPDF_Dict,
                                   key: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Proxy_New(mmgr: HPDF_MMgr, obj: *mut ::std::os::raw::c_void)
     -> HPDF_Proxy;
    pub fn HPDF_Xref_New(mmgr: HPDF_MMgr, offset: HPDF_UINT32) -> HPDF_Xref;
    pub fn HPDF_Xref_Free(xref: HPDF_Xref);
    pub fn HPDF_Xref_Add(xref: HPDF_Xref, obj: *mut ::std::os::raw::c_void)
     -> HPDF_STATUS;
    pub fn HPDF_Xref_GetEntry(xref: HPDF_Xref, index: HPDF_UINT)
     -> HPDF_XrefEntry;
    pub fn HPDF_Xref_WriteToStream(xref: HPDF_Xref, stream: HPDF_Stream,
                                   e: HPDF_Encrypt) -> HPDF_STATUS;
    pub fn HPDF_Xref_GetEntryByObjectId(xref: HPDF_Xref, obj_id: HPDF_UINT)
     -> HPDF_XrefEntry;
    pub fn HPDF_Catalog_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Catalog;
    pub fn HPDF_Catalog_GetNames(catalog: HPDF_Catalog) -> HPDF_NameDict;
    pub fn HPDF_Catalog_SetNames(catalog: HPDF_Catalog, dict: HPDF_NameDict)
     -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetRoot(catalog: HPDF_Catalog) -> HPDF_Pages;
    pub fn HPDF_Catalog_GetPageLayout(catalog: HPDF_Catalog)
     -> HPDF_PageLayout;
    pub fn HPDF_Catalog_SetPageLayout(catalog: HPDF_Catalog,
                                      layout: HPDF_PageLayout) -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetPageMode(catalog: HPDF_Catalog) -> HPDF_PageMode;
    pub fn HPDF_Catalog_SetPageMode(catalog: HPDF_Catalog,
                                    mode: HPDF_PageMode) -> HPDF_STATUS;
    pub fn HPDF_Catalog_SetOpenAction(catalog: HPDF_Catalog,
                                      open_action: HPDF_Destination)
     -> HPDF_STATUS;
    pub fn HPDF_Catalog_AddPageLabel(catalog: HPDF_Catalog,
                                     page_num: HPDF_UINT,
                                     page_label: HPDF_Dict) -> HPDF_STATUS;
    pub fn HPDF_Catalog_GetViewerPreference(catalog: HPDF_Catalog)
     -> HPDF_UINT;
    pub fn HPDF_Catalog_SetViewerPreference(catalog: HPDF_Catalog,
                                            value: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Catalog_Validate(catalog: HPDF_Catalog) -> HPDF_BOOL;
    pub fn HPDF_Image_Load1BitImageFromMem(mmgr: HPDF_MMgr,
                                           buf: *const HPDF_BYTE,
                                           xref: HPDF_Xref, width: HPDF_UINT,
                                           height: HPDF_UINT,
                                           line_width: HPDF_UINT,
                                           top_is_first: HPDF_BOOL)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadPngImage(mmgr: HPDF_MMgr, png_data: HPDF_Stream,
                                   xref: HPDF_Xref,
                                   delayed_loading: HPDF_BOOL) -> HPDF_Image;
    pub fn HPDF_Image_LoadJpegImage(mmgr: HPDF_MMgr, jpeg_data: HPDF_Stream,
                                    xref: HPDF_Xref) -> HPDF_Image;
    pub fn HPDF_Image_LoadJpegImageFromMem(mmgr: HPDF_MMgr,
                                           buf: *const HPDF_BYTE,
                                           size: HPDF_UINT, xref: HPDF_Xref)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadRawImage(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                                   xref: HPDF_Xref, width: HPDF_UINT,
                                   height: HPDF_UINT,
                                   color_space: HPDF_ColorSpace)
     -> HPDF_Image;
    pub fn HPDF_Image_LoadRawImageFromMem(mmgr: HPDF_MMgr,
                                          buf: *const HPDF_BYTE,
                                          xref: HPDF_Xref, width: HPDF_UINT,
                                          height: HPDF_UINT,
                                          color_space: HPDF_ColorSpace,
                                          bits_per_component: HPDF_UINT)
     -> HPDF_Image;
    pub fn HPDF_Image_Validate(image: HPDF_Image) -> HPDF_BOOL;
    pub fn HPDF_Image_SetMask(image: HPDF_Image, mask: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Image_SetColorSpace(image: HPDF_Image, colorspace: HPDF_Array)
     -> HPDF_STATUS;
    pub fn HPDF_Image_SetRenderingIntent(image: HPDF_Image,
                                         intent:
                                             *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_FontDef_Free(fontdef: HPDF_FontDef);
    pub fn HPDF_FontDef_Cleanup(fontdef: HPDF_FontDef);
    pub fn HPDF_FontDef_Validate(fontdef: HPDF_FontDef) -> HPDF_BOOL;
    pub fn HPDF_Type1FontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_Load(mmgr: HPDF_MMgr, afm: HPDF_Stream,
                                  font_data: HPDF_Stream) -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_Duplicate(mmgr: HPDF_MMgr, src: HPDF_FontDef)
     -> HPDF_FontDef;
    pub fn HPDF_Type1FontDef_SetWidths(fontdef: HPDF_FontDef,
                                       widths: *const HPDF_CharData)
     -> HPDF_STATUS;
    pub fn HPDF_Type1FontDef_GetWidthByName(fontdef: HPDF_FontDef,
                                            gryph_name:
                                                *const ::std::os::raw::c_char)
     -> HPDF_INT16;
    pub fn HPDF_Type1FontDef_GetWidth(fontdef: HPDF_FontDef,
                                      unicode: HPDF_UNICODE) -> HPDF_INT16;
    pub fn HPDF_Base14FontDef_New(mmgr: HPDF_MMgr,
                                  font_name: *const ::std::os::raw::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_New(mmgr: HPDF_MMgr) -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_Load(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                               embedding: HPDF_BOOL) -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_Load2(mmgr: HPDF_MMgr, stream: HPDF_Stream,
                                index: HPDF_UINT, embedding: HPDF_BOOL)
     -> HPDF_FontDef;
    pub fn HPDF_TTFontDef_GetGlyphid(fontdef: HPDF_FontDef,
                                     unicode: HPDF_UINT16) -> HPDF_UINT16;
    pub fn HPDF_TTFontDef_GetCharWidth(fontdef: HPDF_FontDef,
                                       unicode: HPDF_UINT16) -> HPDF_INT16;
    pub fn HPDF_TTFontDef_GetGidWidth(fontdef: HPDF_FontDef, gid: HPDF_UINT16)
     -> HPDF_INT16;
    pub fn HPDF_TTFontDef_SaveFontData(fontdef: HPDF_FontDef,
                                       stream: HPDF_Stream) -> HPDF_STATUS;
    pub fn HPDF_TTFontDef_GetCharBBox(fontdef: HPDF_FontDef,
                                      unicode: HPDF_UINT16) -> HPDF_Box;
    pub fn HPDF_TTFontDef_SetTagName(fontdef: HPDF_FontDef,
                                     tag: *mut ::std::os::raw::c_char);
    pub fn HPDF_CIDFontDef_New(mmgr: HPDF_MMgr,
                               name: *mut ::std::os::raw::c_char,
                               init_fn: HPDF_FontDef_InitFunc)
     -> HPDF_FontDef;
    pub fn HPDF_CIDFontDef_AddWidth(fontdef: HPDF_FontDef,
                                    widths: *const HPDF_CID_Width)
     -> HPDF_STATUS;
    pub fn HPDF_CIDFontDef_GetCIDWidth(fontdef: HPDF_FontDef,
                                       cid: HPDF_UINT16) -> HPDF_INT16;
    pub fn HPDF_CIDFontDef_ChangeStyle(fontdef: HPDF_FontDef, bold: HPDF_BOOL,
                                       italic: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_Type1Font_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                              encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_TTFont_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                           encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_Type0Font_New(mmgr: HPDF_MMgr, fontdef: HPDF_FontDef,
                              encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Font;
    pub fn HPDF_Font_Validate(font: HPDF_Font) -> HPDF_BOOL;
    pub fn HPDF_GState_New(mmgr: HPDF_MMgr, current: HPDF_GState)
     -> HPDF_GState;
    pub fn HPDF_GState_Free(mmgr: HPDF_MMgr, gstate: HPDF_GState)
     -> HPDF_GState;
    pub fn HPDF_ExtGState_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Dict;
    pub fn HPDF_ExtGState_Validate(ext_gstate: HPDF_ExtGState) -> HPDF_BOOL;
    pub fn HPDF_Pages_New(mmgr: HPDF_MMgr, parent: HPDF_Pages,
                          xref: HPDF_Xref) -> HPDF_Pages;
    pub fn HPDF_Pages_Validate(pages: HPDF_Pages) -> HPDF_BOOL;
    pub fn HPDF_Pages_AddKids(parent: HPDF_Pages, kid: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_InsertBefore(page: HPDF_Page, target: HPDF_Page)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Validate(page: HPDF_Page) -> HPDF_BOOL;
    pub fn HPDF_Page_New(mmgr: HPDF_MMgr, xref: HPDF_Xref) -> HPDF_Page;
    pub fn HPDF_Page_GetInheritableItem(page: HPDF_Page,
                                        key: *const ::std::os::raw::c_char,
                                        obj_class: HPDF_UINT16)
     -> *mut ::std::os::raw::c_void;
    pub fn HPDF_Page_GetXObjectName(page: HPDF_Page, xobj: HPDF_XObject)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Page_GetLocalFontName(page: HPDF_Page, font: HPDF_Font)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Page_GetExtGStateName(page: HPDF_Page, gstate: HPDF_ExtGState)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Page_GetMediaBox(page: HPDF_Page) -> HPDF_Box;
    pub fn HPDF_Page_SetBoxValue(page: HPDF_Page,
                                 name: *const ::std::os::raw::c_char,
                                 index: HPDF_UINT, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFilter(page: HPDF_Page, filter: HPDF_UINT);
    pub fn HPDF_Page_CheckState(page: HPDF_Page, mode: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_OutlineRoot_New(mmgr: HPDF_MMgr, xref: HPDF_Xref)
     -> HPDF_Outline;
    pub fn HPDF_Outline_New(mmgr: HPDF_MMgr, parent: HPDF_Outline,
                            title: *const ::std::os::raw::c_char,
                            encoder: HPDF_Encoder, xref: HPDF_Xref)
     -> HPDF_Outline;
    pub fn HPDF_Outline_GetFirst(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetLast(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetPrev(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetNext(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetParent(outline: HPDF_Outline) -> HPDF_Outline;
    pub fn HPDF_Outline_GetOpened(outline: HPDF_Outline) -> HPDF_BOOL;
    pub fn HPDF_Outline_Validate(obj: HPDF_Outline) -> HPDF_BOOL;
    pub fn HPDF_Doc_FindEncoder(pdf: HPDF_Doc,
                                encoding_name: *const ::std::os::raw::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_Doc_FindFontDef(pdf: HPDF_Doc,
                                font_name: *const ::std::os::raw::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_Doc_FindFont(pdf: HPDF_Doc,
                             font_name: *const ::std::os::raw::c_char,
                             encoding_name: *const ::std::os::raw::c_char)
     -> HPDF_Font;
    pub fn HPDF_Doc_Validate(pdf: HPDF_Doc) -> HPDF_BOOL;
    pub fn HPDF_Doc_GetCurrentPages(pdf: HPDF_Doc) -> HPDF_Pages;
    pub fn HPDF_Doc_AddPagesTo(pdf: HPDF_Doc, parent: HPDF_Pages)
     -> HPDF_Pages;
    pub fn HPDF_Doc_SetCurrentPages(pdf: HPDF_Doc, pages: HPDF_Pages)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_SetCurrentPage(pdf: HPDF_Doc, page: HPDF_Page)
     -> HPDF_STATUS;
    pub fn HPDF_GetFontDef(pdf: HPDF_Doc,
                           font_name: *const ::std::os::raw::c_char)
     -> HPDF_FontDef;
    pub fn HPDF_Doc_RegisterFontDef(pdf: HPDF_Doc, fontdef: HPDF_FontDef)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_RegisterEncoder(pdf: HPDF_Doc, encoder: HPDF_Encoder)
     -> HPDF_STATUS;
    pub fn HPDF_Doc_SetEncryptOn(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Doc_SetEncryptOff(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Doc_PrepareEncryption(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_PDFA_AppendOutputIntents(pdf: HPDF_Doc,
                                         iccname:
                                             *const ::std::os::raw::c_char,
                                         iccdict: HPDF_Dict) -> HPDF_STATUS;
    pub fn HPDF_PDFA_SetPDFAConformance(pdf: HPDF_Doc,
                                        pdfatype: HPDF_PDFAType)
     -> HPDF_STATUS;
    pub fn HPDF_PDFA_GenerateID(arg1: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetVersion() -> *const ::std::os::raw::c_char;
    pub fn HPDF_NewEx(user_error_fn: HPDF_Error_Handler,
                      user_alloc_fn: HPDF_Alloc_Func,
                      user_free_fn: HPDF_Free_Func,
                      mem_pool_buf_size: HPDF_UINT,
                      user_data: *mut ::std::os::raw::c_void) -> HPDF_Doc;
    pub fn HPDF_New(user_error_fn: HPDF_Error_Handler,
                    user_data: *mut ::std::os::raw::c_void) -> HPDF_Doc;
    pub fn HPDF_SetErrorHandler(pdf: HPDF_Doc,
                                user_error_fn: HPDF_Error_Handler)
     -> HPDF_STATUS;
    pub fn HPDF_Free(pdf: HPDF_Doc);
    pub fn HPDF_NewDoc(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_FreeDoc(pdf: HPDF_Doc);
    pub fn HPDF_HasDoc(pdf: HPDF_Doc) -> HPDF_BOOL;
    pub fn HPDF_FreeDocAll(pdf: HPDF_Doc);
    pub fn HPDF_SaveToStream(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetContents(pdf: HPDF_Doc, buf: *mut HPDF_BYTE,
                            size: *mut HPDF_UINT32) -> HPDF_STATUS;
    pub fn HPDF_GetStreamSize(pdf: HPDF_Doc) -> HPDF_UINT32;
    pub fn HPDF_ReadFromStream(pdf: HPDF_Doc, buf: *mut HPDF_BYTE,
                               size: *mut HPDF_UINT32) -> HPDF_STATUS;
    pub fn HPDF_ResetStream(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_SaveToFile(pdf: HPDF_Doc,
                           file_name: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_GetError(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_GetErrorDetail(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_ResetError(pdf: HPDF_Doc);
    pub fn HPDF_CheckError(error: HPDF_Error) -> HPDF_STATUS;
    pub fn HPDF_SetPagesConfiguration(pdf: HPDF_Doc,
                                      page_per_pages: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_GetPageByIndex(pdf: HPDF_Doc, index: HPDF_UINT) -> HPDF_Page;
    pub fn HPDF_GetPageMMgr(page: HPDF_Page) -> HPDF_MMgr;
    pub fn HPDF_GetPageLayout(pdf: HPDF_Doc) -> HPDF_PageLayout;
    pub fn HPDF_SetPageLayout(pdf: HPDF_Doc, layout: HPDF_PageLayout)
     -> HPDF_STATUS;
    pub fn HPDF_GetPageMode(pdf: HPDF_Doc) -> HPDF_PageMode;
    pub fn HPDF_SetPageMode(pdf: HPDF_Doc, mode: HPDF_PageMode)
     -> HPDF_STATUS;
    pub fn HPDF_GetViewerPreference(pdf: HPDF_Doc) -> HPDF_UINT;
    pub fn HPDF_SetViewerPreference(pdf: HPDF_Doc, value: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_SetOpenAction(pdf: HPDF_Doc, open_action: HPDF_Destination)
     -> HPDF_STATUS;
    pub fn HPDF_GetCurrentPage(pdf: HPDF_Doc) -> HPDF_Page;
    pub fn HPDF_AddPage(pdf: HPDF_Doc) -> HPDF_Page;
    pub fn HPDF_InsertPage(pdf: HPDF_Doc, page: HPDF_Page) -> HPDF_Page;
    pub fn HPDF_Page_SetWidth(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetHeight(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetSize(page: HPDF_Page, size: HPDF_PageSizes,
                             direction: HPDF_PageDirection) -> HPDF_STATUS;
    pub fn HPDF_Page_SetRotate(page: HPDF_Page, angle: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetZoom(page: HPDF_Page, zoom: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_GetFont(pdf: HPDF_Doc,
                        font_name: *const ::std::os::raw::c_char,
                        encoding_name: *const ::std::os::raw::c_char)
     -> HPDF_Font;
    pub fn HPDF_LoadType1FontFromFile(pdf: HPDF_Doc,
                                      afm_file_name:
                                          *const ::std::os::raw::c_char,
                                      data_file_name:
                                          *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_GetTTFontDefFromFile(pdf: HPDF_Doc,
                                     file_name: *const ::std::os::raw::c_char,
                                     embedding: HPDF_BOOL) -> HPDF_FontDef;
    pub fn HPDF_LoadTTFontFromFile(pdf: HPDF_Doc,
                                   file_name: *const ::std::os::raw::c_char,
                                   embedding: HPDF_BOOL)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_LoadTTFontFromFile2(pdf: HPDF_Doc,
                                    file_name: *const ::std::os::raw::c_char,
                                    index: HPDF_UINT, embedding: HPDF_BOOL)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_AddPageLabel(pdf: HPDF_Doc, page_num: HPDF_UINT,
                             style: HPDF_PageNumStyle, first_page: HPDF_UINT,
                             prefix: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_UseJPFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseKRFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNSFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNTFonts(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_CreateOutline(pdf: HPDF_Doc, parent: HPDF_Outline,
                              title: *const ::std::os::raw::c_char,
                              encoder: HPDF_Encoder) -> HPDF_Outline;
    pub fn HPDF_Outline_SetOpened(outline: HPDF_Outline, opened: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Outline_SetDestination(outline: HPDF_Outline,
                                       dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Page_CreateDestination(page: HPDF_Page) -> HPDF_Destination;
    pub fn HPDF_Destination_SetXYZ(dst: HPDF_Destination, left: HPDF_REAL,
                                   top: HPDF_REAL, zoom: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFit(dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitH(dst: HPDF_Destination, top: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitV(dst: HPDF_Destination, left: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitR(dst: HPDF_Destination, left: HPDF_REAL,
                                    bottom: HPDF_REAL, right: HPDF_REAL,
                                    top: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitB(dst: HPDF_Destination) -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitBH(dst: HPDF_Destination, top: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Destination_SetFitBV(dst: HPDF_Destination, left: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_GetEncoder(pdf: HPDF_Doc,
                           encoding_name: *const ::std::os::raw::c_char)
     -> HPDF_Encoder;
    pub fn HPDF_GetCurrentEncoder(pdf: HPDF_Doc) -> HPDF_Encoder;
    pub fn HPDF_SetCurrentEncoder(pdf: HPDF_Doc,
                                  encoding_name:
                                      *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Encoder_GetType(encoder: HPDF_Encoder) -> HPDF_EncoderType;
    pub fn HPDF_Encoder_GetByteType(encoder: HPDF_Encoder,
                                    text: *const ::std::os::raw::c_char,
                                    index: HPDF_UINT) -> HPDF_ByteType;
    pub fn HPDF_Encoder_GetUnicode(encoder: HPDF_Encoder, code: HPDF_UINT16)
     -> HPDF_UNICODE;
    pub fn HPDF_Encoder_GetWritingMode(encoder: HPDF_Encoder)
     -> HPDF_WritingMode;
    pub fn HPDF_UseJPEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseKREncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNSEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseCNTEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_UseUTFEncodings(pdf: HPDF_Doc) -> HPDF_STATUS;
    pub fn HPDF_Page_CreateXObjectFromImage(pdf: HPDF_Doc, page: HPDF_Page,
                                            rect: HPDF_Rect,
                                            image: HPDF_Image,
                                            zoom: HPDF_Boolean)
     -> HPDF_XObject;
    pub fn HPDF_Page_CreateXObjectAsWhiteRect(pdf: HPDF_Doc, page: HPDF_Page,
                                              rect: HPDF_Rect)
     -> HPDF_XObject;
    pub fn HPDF_Page_Create3DAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                   tb: HPDF_BOOL, np: HPDF_BOOL,
                                   u3d: HPDF_U3D, ap: HPDF_Image)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateTextAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                     text: *const ::std::os::raw::c_char,
                                     encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateFreeTextAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                         text: *const ::std::os::raw::c_char,
                                         encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateLineAnnot(page: HPDF_Page,
                                     text: *const ::std::os::raw::c_char,
                                     encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateWidgetAnnot_WhiteOnlyWhilePrint(pdf: HPDF_Doc,
                                                           page: HPDF_Page,
                                                           rect: HPDF_Rect)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateWidgetAnnot(page: HPDF_Page, rect: HPDF_Rect)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateLinkAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                     dst: HPDF_Destination)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateURILinkAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                        uri: *const ::std::os::raw::c_char)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateTextMarkupAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                           text:
                                               *const ::std::os::raw::c_char,
                                           encoder: HPDF_Encoder,
                                           subType: HPDF_AnnotType)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateHighlightAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::std::os::raw::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateUnderlineAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::std::os::raw::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateSquigglyAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                         text: *const ::std::os::raw::c_char,
                                         encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateStrikeOutAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                          text: *const ::std::os::raw::c_char,
                                          encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreatePopupAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                      parent: HPDF_Annotation)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateStampAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                      name: HPDF_StampAnnotName,
                                      text: *const ::std::os::raw::c_char,
                                      encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateProjectionAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                           text:
                                               *const ::std::os::raw::c_char,
                                           encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateSquareAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                       text: *const ::std::os::raw::c_char,
                                       encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_Page_CreateCircleAnnot(page: HPDF_Page, rect: HPDF_Rect,
                                       text: *const ::std::os::raw::c_char,
                                       encoder: HPDF_Encoder)
     -> HPDF_Annotation;
    pub fn HPDF_LinkAnnot_SetHighlightMode(annot: HPDF_Annotation,
                                           mode: HPDF_AnnotHighlightMode)
     -> HPDF_STATUS;
    pub fn HPDF_LinkAnnot_SetJavaScript(annot: HPDF_Annotation,
                                        javascript: HPDF_JavaScript)
     -> HPDF_STATUS;
    pub fn HPDF_LinkAnnot_SetBorderStyle(annot: HPDF_Annotation,
                                         width: HPDF_REAL,
                                         dash_on: HPDF_UINT16,
                                         dash_off: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_TextAnnot_SetIcon(annot: HPDF_Annotation,
                                  icon: HPDF_AnnotIcon) -> HPDF_STATUS;
    pub fn HPDF_TextAnnot_SetOpened(annot: HPDF_Annotation, opened: HPDF_BOOL)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_SetRGBColor(annot: HPDF_Annotation,
                                  color: HPDF_RGBColor) -> HPDF_STATUS;
    pub fn HPDF_Annot_SetCMYKColor(annot: HPDF_Annotation,
                                   color: HPDF_CMYKColor) -> HPDF_STATUS;
    pub fn HPDF_Annot_SetGrayColor(annot: HPDF_Annotation, color: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_SetNoColor(annot: HPDF_Annotation) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetTitle(annot: HPDF_Annotation,
                                     name: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetSubject(annot: HPDF_Annotation,
                                       name: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetCreationDate(annot: HPDF_Annotation,
                                            value: HPDF_Date) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetTransparency(annot: HPDF_Annotation,
                                            value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetIntent(annot: HPDF_Annotation,
                                      intent: HPDF_AnnotIntent)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetPopup(annot: HPDF_Annotation,
                                     popup: HPDF_Annotation) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetRectDiff(annot: HPDF_Annotation,
                                        rect: HPDF_Rect) -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetCloudEffect(annot: HPDF_Annotation,
                                           cloudIntensity: HPDF_INT)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorRGBColor(annot: HPDF_Annotation,
                                                color: HPDF_RGBColor)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorCMYKColor(annot: HPDF_Annotation,
                                                 color: HPDF_CMYKColor)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorGrayColor(annot: HPDF_Annotation,
                                                 color: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_MarkupAnnot_SetInteriorTransparent(annot: HPDF_Annotation)
     -> HPDF_STATUS;
    pub fn HPDF_TextMarkupAnnot_SetQuadPoints(annot: HPDF_Annotation,
                                              lb: HPDF_Point, rb: HPDF_Point,
                                              rt: HPDF_Point, lt: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Annot_Set3DView(mmgr: HPDF_MMgr, annot: HPDF_Annotation,
                                annot3d: HPDF_Annotation, view: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_PopupAnnot_SetOpened(annot: HPDF_Annotation,
                                     opened: HPDF_BOOL) -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_SetLineEndingStyle(annot: HPDF_Annotation,
                                                 startStyle:
                                                     HPDF_LineAnnotEndingStyle,
                                                 endStyle:
                                                     HPDF_LineAnnotEndingStyle)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_Set3PointCalloutLine(annot: HPDF_Annotation,
                                                   startPoint: HPDF_Point,
                                                   kneePoint: HPDF_Point,
                                                   endPoint: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_Set2PointCalloutLine(annot: HPDF_Annotation,
                                                   startPoint: HPDF_Point,
                                                   endPoint: HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_FreeTextAnnot_SetDefaultStyle(annot: HPDF_Annotation,
                                              style:
                                                  *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetPosition(annot: HPDF_Annotation,
                                      startPoint: HPDF_Point,
                                      startStyle: HPDF_LineAnnotEndingStyle,
                                      endPoint: HPDF_Point,
                                      endStyle: HPDF_LineAnnotEndingStyle)
     -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetLeader(annot: HPDF_Annotation,
                                    leaderLen: HPDF_INT,
                                    leaderExtLen: HPDF_INT,
                                    leaderOffsetLen: HPDF_INT) -> HPDF_STATUS;
    pub fn HPDF_LineAnnot_SetCaption(annot: HPDF_Annotation,
                                     showCaption: HPDF_BOOL,
                                     position: HPDF_LineAnnotCapPosition,
                                     horzOffset: HPDF_INT,
                                     vertOffset: HPDF_INT) -> HPDF_STATUS;
    pub fn HPDF_Annotation_SetBorderStyle(annot: HPDF_Annotation,
                                          subtype: HPDF_BSSubtype,
                                          width: HPDF_REAL,
                                          dash_on: HPDF_UINT16,
                                          dash_off: HPDF_UINT16,
                                          dash_phase: HPDF_UINT16)
     -> HPDF_STATUS;
    pub fn HPDF_ProjectionAnnot_SetExData(annot: HPDF_Annotation,
                                          exdata: HPDF_ExData) -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DC3DMeasure(page: HPDF_Page,
                                        firstanchorpoint: HPDF_Point3D,
                                        textanchorpoint: HPDF_Point3D)
     -> HPDF_3DMeasure;
    pub fn HPDF_Page_CreatePD33DMeasure(page: HPDF_Page,
                                        annotationPlaneNormal: HPDF_Point3D,
                                        firstAnchorPoint: HPDF_Point3D,
                                        secondAnchorPoint: HPDF_Point3D,
                                        leaderLinesDirection: HPDF_Point3D,
                                        measurementValuePoint: HPDF_Point3D,
                                        textYDirection: HPDF_Point3D,
                                        value: HPDF_REAL,
                                        unitsString:
                                            *const ::std::os::raw::c_char)
     -> HPDF_3DMeasure;
    pub fn HPDF_3DMeasure_SetName(measure: HPDF_3DMeasure,
                                  name: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_3DMeasure_SetColor(measure: HPDF_3DMeasure,
                                   color: HPDF_RGBColor) -> HPDF_STATUS;
    pub fn HPDF_3DMeasure_SetTextSize(measure: HPDF_3DMeasure,
                                      textsize: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetTextBoxSize(measure: HPDF_3DMeasure,
                                            x: HPDF_INT32, y: HPDF_INT32)
     -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetText(measure: HPDF_3DMeasure,
                                     text: *const ::std::os::raw::c_char,
                                     encoder: HPDF_Encoder) -> HPDF_STATUS;
    pub fn HPDF_3DC3DMeasure_SetProjectionAnotation(measure: HPDF_3DMeasure,
                                                    projectionanotation:
                                                        HPDF_Annotation)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DAnnotExData(page: HPDF_Page) -> HPDF_ExData;
    pub fn HPDF_3DAnnotExData_Set3DMeasurement(exdata: HPDF_ExData,
                                               measure: HPDF_3DMeasure)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Create3DView(page: HPDF_Page, u3d: HPDF_U3D,
                                  annot3d: HPDF_Annotation,
                                  name: *const ::std::os::raw::c_char)
     -> HPDF_Dict;
    pub fn HPDF_3DView_Add3DC3DMeasure(view: HPDF_Dict,
                                       measure: HPDF_3DMeasure)
     -> HPDF_STATUS;
    pub fn HPDF_LoadPngImageFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                                    size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_LoadPngImageFromFile(pdf: HPDF_Doc,
                                     filename: *const ::std::os::raw::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadPngImageFromFile2(pdf: HPDF_Doc,
                                      filename: *const ::std::os::raw::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadJpegImageFromFile(pdf: HPDF_Doc,
                                      filename: *const ::std::os::raw::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadJpegImageFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                                     size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_LoadU3DFromFile(pdf: HPDF_Doc,
                                filename: *const ::std::os::raw::c_char)
     -> HPDF_Image;
    pub fn HPDF_LoadU3DFromMem(pdf: HPDF_Doc, buffer: *const HPDF_BYTE,
                               size: HPDF_UINT) -> HPDF_Image;
    pub fn HPDF_Image_LoadRaw1BitImageFromMem(pdf: HPDF_Doc,
                                              buf: *const HPDF_BYTE,
                                              width: HPDF_UINT,
                                              height: HPDF_UINT,
                                              line_width: HPDF_UINT,
                                              black_is1: HPDF_BOOL,
                                              top_is_first: HPDF_BOOL)
     -> HPDF_Image;
    pub fn HPDF_LoadRawImageFromFile(pdf: HPDF_Doc,
                                     filename: *const ::std::os::raw::c_char,
                                     width: HPDF_UINT, height: HPDF_UINT,
                                     color_space: HPDF_ColorSpace)
     -> HPDF_Image;
    pub fn HPDF_LoadRawImageFromMem(pdf: HPDF_Doc, buf: *const HPDF_BYTE,
                                    width: HPDF_UINT, height: HPDF_UINT,
                                    color_space: HPDF_ColorSpace,
                                    bits_per_component: HPDF_UINT)
     -> HPDF_Image;
    pub fn HPDF_Image_AddSMask(image: HPDF_Image, smask: HPDF_Image)
     -> HPDF_STATUS;
    pub fn HPDF_Image_GetSize(image: HPDF_Image) -> HPDF_Point;
    pub fn HPDF_Image_GetSize2(image: HPDF_Image, size: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Image_GetWidth(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetHeight(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetBitsPerComponent(image: HPDF_Image) -> HPDF_UINT;
    pub fn HPDF_Image_GetColorSpace(image: HPDF_Image)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Image_SetColorMask(image: HPDF_Image, rmin: HPDF_UINT,
                                   rmax: HPDF_UINT, gmin: HPDF_UINT,
                                   gmax: HPDF_UINT, bmin: HPDF_UINT,
                                   bmax: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_Image_SetMaskImage(image: HPDF_Image, mask_image: HPDF_Image)
     -> HPDF_STATUS;
    pub fn HPDF_SetInfoAttr(pdf: HPDF_Doc, _type: HPDF_InfoType,
                            value: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_GetInfoAttr(pdf: HPDF_Doc, _type: HPDF_InfoType)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_SetInfoDateAttr(pdf: HPDF_Doc, _type: HPDF_InfoType,
                                value: HPDF_Date) -> HPDF_STATUS;
    pub fn HPDF_SetPassword(pdf: HPDF_Doc,
                            owner_passwd: *const ::std::os::raw::c_char,
                            user_passwd: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_SetPermission(pdf: HPDF_Doc, permission: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_SetEncryptionMode(pdf: HPDF_Doc, mode: HPDF_EncryptMode,
                                  key_len: HPDF_UINT) -> HPDF_STATUS;
    pub fn HPDF_SetCompressionMode(pdf: HPDF_Doc, mode: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Font_GetFontName(font: HPDF_Font)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Font_GetEncodingName(font: HPDF_Font)
     -> *const ::std::os::raw::c_char;
    pub fn HPDF_Font_GetUnicodeWidth(font: HPDF_Font, code: HPDF_UNICODE)
     -> HPDF_INT;
    pub fn HPDF_Font_GetBBox(font: HPDF_Font) -> HPDF_Box;
    pub fn HPDF_Font_GetAscent(font: HPDF_Font) -> HPDF_INT;
    pub fn HPDF_Font_GetDescent(font: HPDF_Font) -> HPDF_INT;
    pub fn HPDF_Font_GetXHeight(font: HPDF_Font) -> HPDF_UINT;
    pub fn HPDF_Font_GetCapHeight(font: HPDF_Font) -> HPDF_UINT;
    pub fn HPDF_Font_TextWidth(font: HPDF_Font, text: *const HPDF_BYTE,
                               len: HPDF_UINT) -> HPDF_TextWidth;
    pub fn HPDF_Font_MeasureText(font: HPDF_Font, text: *const HPDF_BYTE,
                                 len: HPDF_UINT, width: HPDF_REAL,
                                 font_size: HPDF_REAL, char_space: HPDF_REAL,
                                 word_space: HPDF_REAL, wordwrap: HPDF_BOOL,
                                 real_width: *mut HPDF_REAL) -> HPDF_UINT;
    pub fn HPDF_AttachFile(pdf: HPDF_Doc, file: *const ::std::os::raw::c_char)
     -> HPDF_EmbeddedFile;
    pub fn HPDF_CreateExtGState(pdf: HPDF_Doc) -> HPDF_ExtGState;
    pub fn HPDF_ExtGState_SetAlphaStroke(ext_gstate: HPDF_ExtGState,
                                         value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_ExtGState_SetAlphaFill(ext_gstate: HPDF_ExtGState,
                                       value: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_ExtGState_SetBlendMode(ext_gstate: HPDF_ExtGState,
                                       mode: HPDF_BlendMode) -> HPDF_STATUS;
    pub fn HPDF_Page_TextWidth(page: HPDF_Page,
                               text: *const ::std::os::raw::c_char)
     -> HPDF_REAL;
    pub fn HPDF_Page_MeasureText(page: HPDF_Page,
                                 text: *const ::std::os::raw::c_char,
                                 width: HPDF_REAL, wordwrap: HPDF_BOOL,
                                 real_width: *mut HPDF_REAL) -> HPDF_UINT;
    pub fn HPDF_Page_GetWidth(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetHeight(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetGMode(page: HPDF_Page) -> HPDF_UINT16;
    pub fn HPDF_Page_GetCurrentPos(page: HPDF_Page) -> HPDF_Point;
    pub fn HPDF_Page_GetCurrentPos2(page: HPDF_Page, pos: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GetCurrentTextPos(page: HPDF_Page) -> HPDF_Point;
    pub fn HPDF_Page_GetCurrentTextPos2(page: HPDF_Page, pos: *mut HPDF_Point)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GetCurrentFont(page: HPDF_Page) -> HPDF_Font;
    pub fn HPDF_Page_GetCurrentFontSize(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTransMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
    pub fn HPDF_Page_GetLineWidth(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetLineCap(page: HPDF_Page) -> HPDF_LineCap;
    pub fn HPDF_Page_GetLineJoin(page: HPDF_Page) -> HPDF_LineJoin;
    pub fn HPDF_Page_GetMiterLimit(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetDash(page: HPDF_Page) -> HPDF_DashMode;
    pub fn HPDF_Page_GetFlat(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetCharSpace(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetWordSpace(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetHorizontalScalling(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextLeading(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextRenderingMode(page: HPDF_Page)
     -> HPDF_TextRenderingMode;
    pub fn HPDF_Page_GetTextRaise(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetTextRise(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetRGBFill(page: HPDF_Page) -> HPDF_RGBColor;
    pub fn HPDF_Page_GetRGBStroke(page: HPDF_Page) -> HPDF_RGBColor;
    pub fn HPDF_Page_GetCMYKFill(page: HPDF_Page) -> HPDF_CMYKColor;
    pub fn HPDF_Page_GetCMYKStroke(page: HPDF_Page) -> HPDF_CMYKColor;
    pub fn HPDF_Page_GetGrayFill(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetGrayStroke(page: HPDF_Page) -> HPDF_REAL;
    pub fn HPDF_Page_GetStrokingColorSpace(page: HPDF_Page)
     -> HPDF_ColorSpace;
    pub fn HPDF_Page_GetFillingColorSpace(page: HPDF_Page) -> HPDF_ColorSpace;
    pub fn HPDF_Page_GetTextMatrix(page: HPDF_Page) -> HPDF_TransMatrix;
    pub fn HPDF_Page_GetGStateDepth(page: HPDF_Page) -> HPDF_UINT;
    pub fn HPDF_Page_SetLineWidth(page: HPDF_Page, line_width: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetLineCap(page: HPDF_Page, line_cap: HPDF_LineCap)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetLineJoin(page: HPDF_Page, line_join: HPDF_LineJoin)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetMiterLimit(page: HPDF_Page, miter_limit: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetDash(page: HPDF_Page, dash_ptn: *const HPDF_UINT16,
                             num_param: HPDF_UINT, phase: HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFlat(page: HPDF_Page, flatness: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetExtGState(page: HPDF_Page, ext_gstate: HPDF_ExtGState)
     -> HPDF_STATUS;
    pub fn HPDF_Page_GSave(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_GRestore(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Concat(page: HPDF_Page, a: HPDF_REAL, b: HPDF_REAL,
                            c: HPDF_REAL, d: HPDF_REAL, x: HPDF_REAL,
                            y: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_LineTo(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo(page: HPDF_Page, x1: HPDF_REAL, y1: HPDF_REAL,
                             x2: HPDF_REAL, y2: HPDF_REAL, x3: HPDF_REAL,
                             y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo2(page: HPDF_Page, x2: HPDF_REAL, y2: HPDF_REAL,
                              x3: HPDF_REAL, y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_CurveTo3(page: HPDF_Page, x1: HPDF_REAL, y1: HPDF_REAL,
                              x3: HPDF_REAL, y3: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePath(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Rectangle(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                               width: HPDF_REAL, height: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Stroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Fill(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Eofill(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_FillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EofillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathFillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ClosePathEofillStroke(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EndPath(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Clip(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_Eoclip(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_BeginText(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_EndText(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCharSpace(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetWordSpace(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetHorizontalScalling(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextLeading(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetFontAndSize(page: HPDF_Page, font: HPDF_Font,
                                    size: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRenderingMode(page: HPDF_Page,
                                          mode: HPDF_TextRenderingMode)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRise(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextRaise(page: HPDF_Page, value: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTextPos(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_MoveTextPos2(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetTextMatrix(page: HPDF_Page, a: HPDF_REAL,
                                   b: HPDF_REAL, c: HPDF_REAL, d: HPDF_REAL,
                                   x: HPDF_REAL, y: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_MoveToNextLine(page: HPDF_Page) -> HPDF_STATUS;
    pub fn HPDF_Page_ShowText(page: HPDF_Page,
                              text: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ShowTextNextLine(page: HPDF_Page,
                                      text: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ShowTextNextLineEx(page: HPDF_Page,
                                        word_space: HPDF_REAL,
                                        char_space: HPDF_REAL,
                                        text: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetGrayFill(page: HPDF_Page, gray: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetGrayStroke(page: HPDF_Page, gray: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetRGBFill(page: HPDF_Page, r: HPDF_REAL, g: HPDF_REAL,
                                b: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetRGBStroke(page: HPDF_Page, r: HPDF_REAL, g: HPDF_REAL,
                                  b: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCMYKFill(page: HPDF_Page, c: HPDF_REAL, m: HPDF_REAL,
                                 y: HPDF_REAL, k: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_SetCMYKStroke(page: HPDF_Page, c: HPDF_REAL,
                                   m: HPDF_REAL, y: HPDF_REAL, k: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_ExecuteXObject(page: HPDF_Page, obj: HPDF_XObject)
     -> HPDF_STATUS;
    pub fn HPDF_Page_New_Content_Stream(page: HPDF_Page,
                                        new_stream: *mut HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_Insert_Shared_Content_Stream(page: HPDF_Page,
                                                  shared_stream: HPDF_Dict)
     -> HPDF_STATUS;
    pub fn HPDF_Page_DrawImage(page: HPDF_Page, image: HPDF_Image,
                               x: HPDF_REAL, y: HPDF_REAL, width: HPDF_REAL,
                               height: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Circle(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                            ray: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Ellipse(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                             xray: HPDF_REAL, yray: HPDF_REAL) -> HPDF_STATUS;
    pub fn HPDF_Page_Arc(page: HPDF_Page, x: HPDF_REAL, y: HPDF_REAL,
                         ray: HPDF_REAL, ang1: HPDF_REAL, ang2: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_Page_TextOut(page: HPDF_Page, xpos: HPDF_REAL,
                             ypos: HPDF_REAL,
                             text: *const ::std::os::raw::c_char)
     -> HPDF_STATUS;
    pub fn HPDF_Page_TextRect(page: HPDF_Page, left: HPDF_REAL,
                              top: HPDF_REAL, right: HPDF_REAL,
                              bottom: HPDF_REAL,
                              text: *const ::std::os::raw::c_char,
                              align: HPDF_TextAlignment, len: *mut HPDF_UINT)
     -> HPDF_STATUS;
    pub fn HPDF_Page_SetSlideShow(page: HPDF_Page,
                                  _type: HPDF_TransitionStyle,
                                  disp_time: HPDF_REAL, trans_time: HPDF_REAL)
     -> HPDF_STATUS;
    pub fn HPDF_ICC_LoadIccFromMem(pdf: HPDF_Doc, mmgr: HPDF_MMgr,
                                   iccdata: HPDF_Stream, xref: HPDF_Xref,
                                   numcomponent: ::std::os::raw::c_int)
     -> HPDF_OutputIntent;
    pub fn HPDF_LoadIccProfileFromFile(pdf: HPDF_Doc,
                                       icc_file_name:
                                           *const ::std::os::raw::c_char,
                                       numcomponent: ::std::os::raw::c_int)
     -> HPDF_OutputIntent;
}
